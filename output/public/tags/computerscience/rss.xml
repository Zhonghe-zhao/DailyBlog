<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title> - ComputerScience</title>
      <link>https://Zhonghe-zhao.github.io/DailyBlog/</link>
      <description></description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://Zhonghe-zhao.github.io/DailyBlog/tags/computerscience/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Wed, 25 Jun 2025 09:17:17 +0000</lastBuildDate>
      <item>
          <title>Computer_Network</title>
          <pubDate>Wed, 25 Jun 2025 09:17:17 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-28/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-28/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-28/">&lt;h2 id=&quot;osimo-xing&quot;&gt;OSI模型&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;核心： 每一层只负责特定的功能&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;物理层：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;传输原始比特流（0和1）&lt;&#x2F;p&gt;
&lt;p&gt;协议： Ethernet (IEEE 802.3)&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;数据链路层：
(交换机)
将比特流组织成数据帧，通过MAC地址在局域网内寻址&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;错误检测（如CRC）、流量控制（如交换机）。&lt;&#x2F;p&gt;
&lt;p&gt;协议： Ethernet (IEEE 802.3)、Wi-Fi (IEEE 802.11) PPP（点对点协议）、VLAN（虚拟局域网）。&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;网络层：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;逻辑寻址（如IP地址）和路由选择（决定数据包从源到目标的路径）。&lt;&#x2F;p&gt;
&lt;p&gt;关键设备：路由器（Router）、三层交换机。&lt;&#x2F;p&gt;
&lt;p&gt;协议： IP（IPv4&#x2F;IPv6）、ICMP（Ping）、OSPF、BGP（路由协议）、ARP（地址解析）。&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;传输层（Transport Layer）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;提供端到端（应用程序之间）的可靠或不可靠传输。&lt;&#x2F;p&gt;
&lt;p&gt;分段（将数据分成段）、流量控制、错误恢复（如重传）。&lt;&#x2F;p&gt;
&lt;p&gt;协议： TCP UDP&lt;&#x2F;p&gt;
&lt;p&gt;5.表示层
6.会话层&lt;&#x2F;p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;应用层&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;直接为用户应用程序提供网络服务接口。&lt;&#x2F;p&gt;
&lt;p&gt;协议： HTTP（网页）、FTP（文件传输）、SMTP（邮件）、DNS（域名解析）、SSH（安全登录）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jian-hua-de-tcp-ipmo-xing&quot;&gt;简化的TCP&#x2F;IP模型&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;li-jie-dui-deng-chuan-shu&quot;&gt;理解对等传输&lt;&#x2F;h2&gt;
&lt;p&gt;每一层的协议在逻辑上认为自己在直接和对端同一层通信，尽管实际数据需要经过下层封装传输。&lt;&#x2F;p&gt;
&lt;p&gt;也就是 协议栈中同一层的虚拟直接对话 数据在设备间经过的物理和逻辑路径。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;示例：以HTTP请求为例的双重视角&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;1.主机A（192.168.1.2）访问服务器B（203.0.113.5）的网页，经过一个路由器。&lt;&#x2F;p&gt;
&lt;p&gt;主机A的HTTP协议 ↔ 服务器B的HTTP协议&lt;&#x2F;p&gt;
&lt;p&gt;逻辑上认为直接发送GET &#x2F;index.html并接收200 OK响应。&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;主机A的TCP ↔ 服务器B的TCP&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;逻辑上建立端到端连接，维护序列号和确认机制。&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;主机A的IP ↔ 服务器B的IP&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;逻辑上认为IP包从192.168.1.2直达203.0.113.5。&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;主机A的MAC ↔ 路由器R1的MAC ↔ 服务器B的MAC&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;逻辑上逐跳协商帧传输（每跳MAC地址变化）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti-1&quot;&gt;问题1：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;交换机转发帧时，是否破坏了数据链路层的对等性？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;交换机只短暂参与MAC层转发，最终帧仍由目标主机的数据链路层处理。&lt;&#x2F;p&gt;
&lt;p&gt;交换机对帧的转发依赖物理层完成信号传输&lt;&#x2F;p&gt;
&lt;p&gt;交换机： 它根据 MAC 地址表，接收帧 → 看目标 → 选择接口转发帧，不改帧内容，也不破坏通信逻辑。&lt;&#x2F;p&gt;
&lt;p&gt;所以交换机就是在链路层转发帧的智能中继器，它不参与更上层的逻辑，靠 MAC 地址表做“选择转发”。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti-2&quot;&gt;问题2：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;IP提供全局逻辑寻址，MAC提供局域网物理寻址 具体是什么流程&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ip：&lt;&#x2F;p&gt;
&lt;p&gt;“全局”：IP地址（例如192.168.1.10或公网IP如8.8.8.8）是全球范围内唯一的，就像一个人的家庭地址（国家+城市+街道+门牌号）。无论设备在世界的哪个角落，IP地址都能唯一标识它。&lt;&#x2F;p&gt;
&lt;p&gt;“逻辑”：IP地址不是绑在硬件上的，而是由软件配置的。比如，你换了网卡，IP地址可以保持不变；或者你把电脑带到另一个网络，IP地址可以重新分配。这种灵活性让IP地址像一个“虚拟标签”，不依赖物理设备。&lt;&#x2F;p&gt;
&lt;p&gt;“寻址”：IP地址的作用是告诉数据包“最终要去哪里”。比如，你从上海寄快递到北京，IP地址就像快递单上的收件人地址，路由器会根据它决定把数据包送到哪个网络。&lt;&#x2F;p&gt;
&lt;p&gt;MAC：&lt;&#x2F;p&gt;
&lt;p&gt;“局域网”：MAC地址（例如AA:BB:CC:DD:EE:FF）只在同一个局域网（LAN，比如你家Wi-Fi网络）内有效。出了这个局域网，MAC地址就没用了，就像你家楼栋内的门牌号，只在楼里有效，出了小区就没人知道。&lt;&#x2F;p&gt;
&lt;p&gt;“物理”：MAC地址是网卡的硬件地址，烧录在网卡芯片里，相当于设备的“身份证号”。它直接跟硬件绑定，告诉局域网内的设备“这是谁的网卡”。&lt;&#x2F;p&gt;
&lt;p&gt;“寻址”：在局域网内，数据包（以太网帧）靠MAC地址找到具体的设备。比如，你家有台电脑和打印机，交换机通过MAC地址知道把数据送到电脑还是打印机。&lt;&#x2F;p&gt;
&lt;p&gt;为什么重要？：局域网内的设备通信很快，交换机直接用MAC地址表转发数据，不需要复杂的逻辑判断，效率很高。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wen-ti-3&quot;&gt;问题3：&lt;&#x2F;h2&gt;
&lt;p&gt;假如用我的思想就是，既然ip是唯一的，那么直接用ip通过路由器找到目标机器，既然交换机不能识别帧我们就去除MAC层？ 难道不行吗 直接对ip包传输到物理层？&lt;&#x2F;p&gt;
&lt;p&gt;IP地址可能重复（不同局域网可能用相同的私有IP）。MAC地址在局域网内由硬件保证唯一，适合本地寻址。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;这可能就是我的思想出了问题！&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;IP：负责端到端的全局寻址，确保数据包从源（比如上海的电脑）到目标（比如北京的服务器）能跨网络到达。它像快递的全国调度系统，规划路线但不负责具体投递。&lt;&#x2F;p&gt;
&lt;p&gt;MAC：负责点到点的局域网内传输，确保数据在当前局域网内送到正确设备（比如你家电脑到路由器）。它像小区快递员，只管本地投递，不关心包裹从哪来、去哪。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;httpxie-yi&quot;&gt;HTTP协议&lt;&#x2F;h2&gt;
&lt;p&gt;首先HTTP是一种应用层协议&lt;&#x2F;p&gt;
&lt;p&gt;其次协议约定了双方的_通信规范_ 也就是，&lt;em&gt;客户端和服务端&lt;&#x2F;em&gt; 遵循这套协议 也就称之为 &lt;em&gt;http请求 http响应&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在客户端（如浏览器）和服务器之间，通过交换文本（或二进制）消息来完成资源传输&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP&#x2F;1.x 使用纯文本格式，便于人类阅读和调试&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP2 改为二进制&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;无状态(服务器不会记得之前的请求，每次的请求都是独立的)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;早期 HTTP&#x2F;1.0：每个请求结束后断开 TCP 连接（性能极差）。&lt;&#x2F;p&gt;
&lt;p&gt;HTTP 本身无连接，但实际依赖 TCP 的长连接优化性能。&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;请求-响应模型（Request-Response）(主动请求，被动响应)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;服务器无法主动推送数据&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如何主动推送呢？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;WebSocket， 轮询（todo）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;httpxiao-xi&quot;&gt;HTTP消息&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;起始行：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;GET &#x2F; index.html HTTP&#x2F;1.1(请求行)&lt;&#x2F;li&gt;
&lt;li&gt;HTTP&#x2F;1.1 200 ok(状态行)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;头部：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;（键值对形式）&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Host: example.com&lt;&#x2F;li&gt;
&lt;li&gt;Content-Type: text&#x2F;html&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;正文&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;实际传输的数据&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti&quot;&gt;问题：&lt;&#x2F;h3&gt;
&lt;p&gt;所以HTTP向下传递到传输层之前 传输的是文本的二进制？ 那么HTTP2的二进制又是什么意思呢？ 如果按照这样HTTP1.x不也是按照二进制传输的吗&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;无论是 HTTP&#x2F;1.x 还是 HTTP&#x2F;2，最终在网络上传输的都是二进制数据&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但两者的关键差异在于 协议本身的组织方式，而非是否转为二进制&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;HTTP1.x：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;64d01640-7e8a-400d-baaa-b77086866e61&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;HTTP2：&lt;&#x2F;strong&gt; 以二进制帧（Frame）格式定义协议（所有消息被拆分为二进制结构）&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;cf3f3ea3-2076-48de-b4fb-1f2423219b38&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;就是说HTTP1.x 将文本格式转化成ASCII码传输
HTTP2 将文本格式转换成二进制帧！ 更轻量&lt;&#x2F;p&gt;
&lt;h4 id=&quot;an-quan-xing&quot;&gt;安全性&lt;&#x2F;h4&gt;
&lt;p&gt;HTTPS： 在 HTTP 和 TCP 之间加入 TLS&#x2F;SSL 加密层&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;TLS&#x2F;SSL 又是什么？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;content-type-ben-zhi-yu-zuo-yong&quot;&gt;Content-Type：本质与作用&lt;&#x2F;h4&gt;
&lt;p&gt;本质：“这段二进制数据（或文本）应该如何被解析和处理？”&lt;&#x2F;p&gt;
&lt;p&gt;解决数据格式的歧义&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tcpxie-yi&quot;&gt;TCP协议&lt;&#x2F;h2&gt;
&lt;p&gt;位于传输层的 提供 &lt;em&gt;可靠的 面向连接的&lt;&#x2F;em&gt; 数据传输服务&lt;&#x2F;p&gt;
&lt;p&gt;解决如何在_不可靠的IP网络_上实现可靠的数据传输&lt;&#x2F;p&gt;
&lt;p&gt;早期的应用层 直接 对接传输层 导致ip协议无法区分数据应该交付给哪个应用&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duan-kou-hao-de-yin-ru&quot;&gt;端口号的引入&lt;&#x2F;h3&gt;
&lt;p&gt;IP 地址只能定位到主机，无法区分主机上哪个程序&#x2F;服务在通信，如果没有端口号，数据包到达主机后，主机不知道该发给哪个程序 所以在传输层引入了端口号 &lt;em&gt;实现进曾间通信的隔离&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti-4&quot;&gt;问题：&lt;&#x2F;h3&gt;
&lt;p&gt;怎么理解？&lt;&#x2F;p&gt;
&lt;p&gt;IP 协议处理的是独立的数据包（Packet），而应用层通常需要连续的字节流（如文件传输）&lt;&#x2F;p&gt;
&lt;p&gt;IP 数据包是网络中传输的基本单位&lt;&#x2F;p&gt;
&lt;p&gt;源&#x2F;目的 IP 地址（从哪里来，到哪里去）。&lt;&#x2F;p&gt;
&lt;p&gt;载荷（Payload）：实际要传输的数据片段（如一个文件的一部分）。&lt;&#x2F;p&gt;
&lt;p&gt;头部控制信息（如 TTL、校验和）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;核心冲突：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;IP层的“独立性”和应用层的“连续性”是天然对立的需求：&lt;&#x2F;p&gt;
&lt;p&gt;IP不保证顺序 → 但应用层需要顺序。&lt;&#x2F;p&gt;
&lt;p&gt;IP可能丢包 → 但应用层需要完整。&lt;&#x2F;p&gt;
&lt;p&gt;这种矛盾需要通过传输层（如TCP）解决，而不是让应用层直接处理IP包&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;核心特性：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可靠性：&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;流量控制&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;拥塞控制&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;全双工通信&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
      </item>
      <item>
          <title>理解char **argv</title>
          <pubDate>Sat, 21 Jun 2025 13:37:03 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-26/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-26/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-26/">&lt;p&gt;首先的困惑就像下述链接描述的一样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.quora.com&#x2F;What-is-the-difference-between-char-*-argv-and-char-argv&quot;&gt;char *argv[] &amp;amp;&amp;amp; char **argv&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;char *argv[]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这是指向 char 的指针数组 。数组中的每个元素都是一个指针，它指向一个字符串（一个字符序列）。&lt;&#x2F;p&gt;
&lt;p&gt;常用于 main 函数的上下文中 ，以处理命令行参数。它通常定义为 &lt;em&gt;int main(int argc, char *argv[])&lt;&#x2F;em&gt; 或 &lt;em&gt;int main(int argc, char **argv)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;char *argv[]&lt;&#x2F;em&gt; 用于表示多个字符串（命令行参数），而 char argv[] 表示单个字符串（字符数组）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;printf(&amp;quot;%s\n&amp;quot;, argv[0]);  sh 正确：打印整个字符串
printf(&amp;quot;%c\n&amp;quot;, argv[0]);  未定义行为（可能乱码&amp;#x2F;崩溃） | 错误：%c 需要 char，但 argv[0] 是 char*
printf(&amp;quot;%c\n&amp;quot;, argv[0][0]);  正确：打印字符串的第一个字符
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;text&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;地址 0x1000: &amp;#x27;s&amp;#x27;
地址 0x1001: &amp;#x27;h&amp;#x27;
地址 0x1002: &amp;#x27;\0&amp;#x27; (字符串结束符)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;printf 的 %s 格式化符号的工作原理：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;它期望一个 char&lt;&#x2F;em&gt; 类型的参数&lt;&#x2F;em&gt;*（即字符串的起始地址）。&lt;&#x2F;p&gt;
&lt;p&gt;从该地址开始，逐个字符打印，直到遇到 \0（NULL 终止符）。&lt;&#x2F;p&gt;
&lt;p&gt;它 自动解引用指针，并持续向后读取内存，直到 \0。&lt;&#x2F;p&gt;
&lt;p&gt;等价&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;char *ptr = argv[0];  &amp;#x2F;&amp;#x2F; ptr 指向 &amp;quot;sh&amp;quot; 的首地址
while (*ptr != &amp;#x27;\0&amp;#x27;) {
    putchar(*ptr);    &amp;#x2F;&amp;#x2F; 打印当前字符
    ptr++;           &amp;#x2F;&amp;#x2F; 移动到下一个字符
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>工具链</title>
          <pubDate>Fri, 20 Jun 2025 12:28:01 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-24/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-24/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-24/">&lt;h1 id=&quot;shen-me-shi-gong-ju-lian&quot;&gt;什么是工具链&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;从源码出发，支持你完成开发、构建、测试、调试、部署的完整过程&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;**编译构建：**把源码变成可运行的程序（如 cargo build、go build）&lt;&#x2F;p&gt;
&lt;p&gt;**依赖管理：**统一管理三方库版本、下载、更新（如 go mod、Cargo.toml）&lt;&#x2F;p&gt;
&lt;p&gt;**代码质量保证：**自动化测试、格式化、静态检查（如 cargo test、clippy）&lt;&#x2F;p&gt;
&lt;p&gt;**调试和发布支持：**调试运行、打包部署、发布（如 cargo run --release）&lt;&#x2F;p&gt;
&lt;p&gt;##理解指令&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;go build&lt;&#x2F;em&gt; &lt;em&gt;go mod init&lt;&#x2F;em&gt; &lt;em&gt;cargo build&lt;&#x2F;em&gt; 等指令做了什么事情？&lt;&#x2F;p&gt;
&lt;p&gt;_go.mod_是做什么的，如果没有会怎么样？&lt;&#x2F;p&gt;
&lt;p&gt;go.mod 记录了模块名和依赖项&lt;&#x2F;p&gt;
&lt;p&gt;go build
编译当前模块的代码，生成可执行文件。&lt;&#x2F;p&gt;
&lt;p&gt;如果没有 go.mod：&lt;&#x2F;p&gt;
&lt;p&gt;无法使用模块化依赖（Go 1.11+推荐模块模式）&lt;&#x2F;p&gt;
&lt;p&gt;Go 会尝试用 GOPATH 模式构建（已逐渐废弃）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mo-kuai-hua-yi-lai&quot;&gt;模块化依赖&lt;&#x2F;h2&gt;
&lt;p&gt;每个模块只关心自己需要的依赖和版本，互不干扰。&lt;&#x2F;p&gt;
&lt;p&gt;例子：
项目 A 用的是 viper v1.9.0，项目 B 用的是 viper v1.8.1，互不冲突。
不像老的 GOPATH 模式下，全局只有一份依赖，项目之间可能“踩版本”。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>地址和字节的关系</title>
          <pubDate>Thu, 19 Jun 2025 09:00:13 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-23/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-23/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-23/">&lt;p&gt;&lt;strong&gt;问题：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;理解一下2的32次方的含义是什么？ 我的理解是 2的32次方代表着 它可以表示2的32次方个数据？ 我不理解他跟B有什么关系！&lt;&#x2F;p&gt;
&lt;p&gt;如果一个地址对应 1 个字节（Byte），那总共能表示 2的32次方个字节！&lt;&#x2F;p&gt;
&lt;p&gt;现在虚拟内存地址：地址范围的个数 = 可访问的字节数&lt;&#x2F;p&gt;
&lt;p&gt;所以2的32次方 = 4GB内存空间&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;所以就是：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个地址指向1字节， 如果我有一个int型的变量a 他现在存储8 它的字节数是4字节是吧？ 我打印a变量的地址最终会输出一个类似于 0x0192730098这样的一个地址，所以说 这一个地址代表一个B？&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，这个地址代表的是“a变量所占内存的第1个字节”的地址。 所以 &amp;amp;a 返回的是 a 的“起始字节地址”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;int 占 4 字节 ⇒ 实际用了连续的 4 个地址&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dan-ji-ye-biao&quot;&gt;单级页表&lt;&#x2F;h2&gt;
&lt;p&gt;32位内存：&lt;&#x2F;p&gt;
&lt;p&gt;2的32次方 = 4GB 虚拟内存&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;理解虚拟内存 和 主存的概念：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;32位系统的虚拟地址空间最大只能访问 4GB 的内存（也就是每个进程最多可以用4GB），但你的物理内存（主存）可以比这大，比如16GB；只是你用不满而已。&lt;&#x2F;p&gt;
&lt;p&gt;页大小4KB： 总空间&#x2F;页大小 = 页个数（2的20次方） 每个页必须都能被找到 就需要_2的20次方个PTE（PTE大小为4字节（32位））_去定位物理地址 总大小就变成了 4MB&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ru-he-kan-dai-duo-ji-ye-biao&quot;&gt;如何看待多级页表&lt;&#x2F;h2&gt;
</description>
      </item>
      <item>
          <title>数据库</title>
          <pubDate>Fri, 13 Jun 2025 13:21:31 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-21/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-21/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-21/">&lt;h1 id=&quot;shu-ju-ku-zhi-shi-shu-li&quot;&gt;数据库知识梳理&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;shen-me-shi-shu-ju-ku&quot;&gt;什么是数据库？&lt;&#x2F;h2&gt;
&lt;p&gt;数据的仓库 高效的保存和查询数据&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wei-shen-me-yao-bao-cun-he-cha-xun-shu-ju-ru-he-bao-zheng-shu-ju-bei-zheng-chang-cun-chu-he-ru-he-cha-xun-shu-ju&quot;&gt;为什么要 保存和查询数据  如何保证数据被正常存储 和 如何查询数据？&lt;&#x2F;h2&gt;
&lt;p&gt;保存数据：系统能长期使用和分析这些数据，&lt;&#x2F;p&gt;
&lt;p&gt;查询数据： 用户能根据条件快速找出需要的信息&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如何保证数据正确被保存和正确的查询数据？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;数据库事务&lt;&#x2F;li&gt;
&lt;li&gt;约束&lt;&#x2F;li&gt;
&lt;li&gt;日志&lt;&#x2F;li&gt;
&lt;li&gt;数据备份&lt;&#x2F;li&gt;
&lt;li&gt;DBMS&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;shen-me-shi-shu-ju-ku-shi-wu&quot;&gt;什么是数据库事务&lt;&#x2F;h2&gt;
&lt;p&gt;保证一组操作要么全部成功、要么全部失败的机制，核心用于&lt;strong&gt;保证数据一致性。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;事务的四大特性：&lt;&#x2F;p&gt;
&lt;p&gt;ACID&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;为什么事务可以避免并发冲突？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;隔离机制： 数据库的隔离级别 + 锁机制&lt;&#x2F;p&gt;
&lt;p&gt;事务的隔离级别：&lt;&#x2F;p&gt;
&lt;p&gt;自上向下 性能由高到低&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;读未提交：虽然级别最低 但也有它的作用。实时监控数据的变化， 对数据一致性要求不严格，允许读到脏数据但能换取速度。&lt;&#x2F;li&gt;
&lt;li&gt;读已提交 ： 事务只能读导已经提交的数据（避免脏读）&lt;&#x2F;li&gt;
&lt;li&gt;可重复读 ：在事务内对同一行多次读取是一样的（其他事务不能修改）&lt;&#x2F;li&gt;
&lt;li&gt;可串行化： 对读的范围加 锁 拒绝其它插入&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dui-yu-ke-zhong-fu-du&quot;&gt;对于可重复读&lt;&#x2F;h2&gt;
&lt;p&gt;在 可重复读隔离级别下，一个事务在开始后所读取的数据会基于快照，一直一致，同一条记录无论读多少次，看到的都是事务开始时的版本，即使其他事务已经修改并提交了这条记录。每个事务会生成一个快照版本号，之后所有查询都基于这个版本读取；不会加锁，但能保证多次读取一致（除非手动加锁，无法防幻读）；&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;对于可串行化：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在某些数据库（如 MySQL）用强锁机制实现。&lt;&#x2F;p&gt;
&lt;p&gt;在 PostgreSQL 中通过MVCC + 并发冲突检测（SSI）实现，更智能但也有事务被中止的风险。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dui-yu-huan-du-qing-kuang&quot;&gt;对于幻读情况&lt;&#x2F;h2&gt;
&lt;p&gt;出现了**“幻影数据”** → 第二次出现了之前“范围里没有”的新行 → 这就是幻读。为什么可重复读 不能 避免幻读？ MVCC快照机制 只保证读过的记录内容不变，没读过的新行还是可以看到！&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;所以可以使用 锁！避免Serializable隔离级别带来的严重性能差&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;所以对于锁的使用时机，如何正确的使用锁，死锁？ 等一些情况 需要对锁有一定的了解和调试！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以&lt;strong&gt;Serializable&lt;&#x2F;strong&gt;的问题 时性能问题！ 只需要开发者修改一下隔离级别，就行轻松避免 脏读等问题！&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;并发事务产生的问题：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;脏读&lt;&#x2F;em&gt;： 读到未提交的数据&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;不可重复读&lt;&#x2F;em&gt;： 同一次查询 两次读的结果不同&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;序列化异常&lt;&#x2F;em&gt;： 成功提交一组事务的结果与一次运行这些事务的所有可能顺序不一致。&lt;&#x2F;p&gt;
&lt;p&gt;疑惑： 不可重复读 怎么了？ A读100 b修改为50 再次读取不应该就是50吗 难道还要让他读到100？&lt;&#x2F;p&gt;
&lt;p&gt;解答： 在事务A未提交时，事务B提交了修改，导致事务A中同一数据多次读取结果不一致，破坏了事务的隔离性，可能导致逻辑错误或数据不稳定。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;幻读&lt;&#x2F;em&gt;： 查询范围内数据被别人新增&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wen-ti&quot;&gt;问题：&lt;&#x2F;h2&gt;
&lt;p&gt;假设账户初始余额是 100，有两个事务并发执行：&lt;&#x2F;p&gt;
&lt;p&gt;事务 A：读余额 → 如果 ≥100，则扣 100&lt;&#x2F;p&gt;
&lt;p&gt;事务 B：读余额 → 如果 ≥100，则扣 100&lt;&#x2F;p&gt;
&lt;p&gt;如果没有串行控制，两者几乎同时读到 100，都满足条件，各自扣 100，最终余额变成 -100！&lt;&#x2F;p&gt;
&lt;p&gt;Serializable的隔离级别可以让数据库检测到并发冲突，强制回滚其中一个事务，性能会大大折扣&lt;&#x2F;p&gt;
&lt;p&gt;Serializable的工作原理：&lt;&#x2F;p&gt;
&lt;p&gt;事务之间如果有“不可串行化的依赖”，就会强制让一个事务回滚；&lt;&#x2F;p&gt;
&lt;p&gt;PostgreSQL 的 Serializable 是通过 检测事务冲突图 实现的（SSI），不是加锁；&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shu-ju-ku-suo-ji-zhi&quot;&gt;数据库锁机制&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;cun-chu-yin-qing&quot;&gt;存储引擎&lt;&#x2F;h2&gt;
&lt;p&gt;负责存储、处理和检索数据的核心组件&lt;&#x2F;p&gt;
&lt;p&gt;应对不同的场景 ， 不同的场景会用到不同的存储引擎&lt;&#x2F;p&gt;
&lt;p&gt;数据的物理结构 ， 索引 ， 查询的实现方式&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pgxiang-bi-yu-mysql&quot;&gt;PG相比于MYSQL&lt;&#x2F;h2&gt;
&lt;p&gt;Postgres：&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;MVCC（多版本并发控制）： PostgreSQL 使用 MVCC 来实现事务隔离，通过为每个事务创建数据快照（版本）来避免读写冲突，默认隔离级别是读已提交，但可轻松配置为可重复读或串行化。

行级锁：

死锁检测：
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>Copy-On-Write</title>
          <pubDate>Thu, 29 May 2025 12:59:51 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-10/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-10/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-10/">&lt;h1 id=&quot;cmu15445&quot;&gt;cmu15445&lt;&#x2F;h1&gt;
&lt;p&gt;在推进cmu15445的时候被一个项目就难住了，写时复制树，啊啊有点崩溃了，搞了好长时间，还是无法推进，这里面的c++语法看着太复杂了！&lt;&#x2F;p&gt;
&lt;p&gt;关于写时复制的一些概念和使用：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lenovo.com&#x2F;us&#x2F;en&#x2F;glossary&#x2F;what-is-cow&#x2F;?orgRef=https%253A%252F%252Fwww.google.com.hk%252F&quot;&gt;写实复制&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title> 6.s081学习</title>
          <pubDate>Wed, 28 May 2025 12:51:30 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-8/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-8/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-8/">&lt;h1 id=&quot;6-s081&quot;&gt;6.s081&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;csdiy.wiki&#x2F;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&#x2F;MIT6.S081&#x2F;&quot;&gt;6.s081&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;Zhonghe-zhao.github.io&#x2F;DailyBlog&#x2F;issue-8&#x2F;%5Bhttps:&#x2F;&#x2F;pdos.csail.mit.edu&#x2F;6.828&#x2F;2021&#x2F;schedule.html%5D(https:&#x2F;&#x2F;pdos.csail.mit.edu&#x2F;6.828&#x2F;2021&#x2F;schedule.html)&quot;&gt;课程&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;阅读文档： https:&#x2F;&#x2F;th0ar.gitbooks.io&#x2F;xv6-chinese&#x2F;content&#x2F;content&#x2F;chapter0.html&lt;&#x2F;p&gt;
&lt;h2 id=&quot;0-cao-zuo-xi-tong-jie-kou&quot;&gt;0. 操作系统接口&lt;&#x2F;h2&gt;
&lt;p&gt;一个&lt;em&gt;向其他运行中程序&lt;&#x2F;em&gt;提供服务的特殊程序。每一个运行中程序（称之为&lt;strong&gt;进程&lt;&#x2F;strong&gt;）都拥有&lt;em&gt;包含指令、数据、栈的内存空间&lt;&#x2F;em&gt; ， &lt;em&gt;指令&lt;&#x2F;em&gt;实现了程序的运算，&lt;em&gt;数据&lt;&#x2F;em&gt;是用于运算过程的变量，&lt;em&gt;栈&lt;&#x2F;em&gt;管理了程序的过程调用&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;进程&lt;&#x2F;strong&gt;通过&lt;strong&gt;系统调用&lt;&#x2F;strong&gt;使用内核服务，系统调用会进入内核，让内核执行服务然后返回。所以 &lt;strong&gt;进程总是在用户空间和内核空间之间交替运行&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;内核使用了 CPU 的硬件保护机制来保证用户进程只能访问自己的内存空间，内核拥有实现保护机制所需的硬件权限(hardware privileges)，而用户程序没有这些权限。当一个用户程序进行一次系统调用时，硬件会提升特权级并且开始执行一些内核中预定义的功能。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jie-kou&quot;&gt;接口&lt;&#x2F;h3&gt;
&lt;p&gt;内核提供的一系列系统调用就是用户程序可见的操作系统接口&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;系统调用&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;fork()&lt;&#x2F;td&gt;&lt;td&gt;创建进程&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;exit()&lt;&#x2F;td&gt;&lt;td&gt;结束当前进程&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;wait()&lt;&#x2F;td&gt;&lt;td&gt;等待子进程结束&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;kill(pid)&lt;&#x2F;td&gt;&lt;td&gt;结束 pid 所指进程&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;getpid()&lt;&#x2F;td&gt;&lt;td&gt;获得当前进程 pid&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sleep(n)&lt;&#x2F;td&gt;&lt;td&gt;睡眠 n 秒&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;exec(filename, *argv)&lt;&#x2F;td&gt;&lt;td&gt;加载并执行一个文件&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sbrk(n)&lt;&#x2F;td&gt;&lt;td&gt;为进程内存空间增加 n 字节&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;open(filename, flags)&lt;&#x2F;td&gt;&lt;td&gt;打开文件，flags 指定读&#x2F;写模式&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;read(fd, buf, n)&lt;&#x2F;td&gt;&lt;td&gt;从文件中读 n 个字节到 buf&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;write(fd, buf, n)&lt;&#x2F;td&gt;&lt;td&gt;从 buf 中写 n 个字节到文件&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;close(fd)&lt;&#x2F;td&gt;&lt;td&gt;关闭打开的 fd&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;dup(fd)&lt;&#x2F;td&gt;&lt;td&gt;复制 fd&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;pipe( p)&lt;&#x2F;td&gt;&lt;td&gt;创建管道， 并把读和写的 fd 返回到p&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;chdir(dirname)&lt;&#x2F;td&gt;&lt;td&gt;改变当前目录&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;mkdir(dirname)&lt;&#x2F;td&gt;&lt;td&gt;创建新的目录&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;mknod(name, major, minor)&lt;&#x2F;td&gt;&lt;td&gt;创建设备文件&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;fstat(fd)&lt;&#x2F;td&gt;&lt;td&gt;返回文件信息&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;link(f1, f2)&lt;&#x2F;td&gt;&lt;td&gt;给 f1 创建一个新名字(f2)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;unlink(filename)&lt;&#x2F;td&gt;&lt;td&gt;删除文件&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;shell 是一个普通的程序，它接受用户输入的命令并且执行它们，它也是传统 Unix 系统中最基本的用户界面。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jin-cheng-he-nei-cun&quot;&gt;进程和内存&lt;&#x2F;h3&gt;
&lt;p&gt;xv6 进程的组成部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用户内存空间： &lt;strong&gt;（指令，数据，栈）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;仅对内核可见的进程状态：&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xv6 是一个操作系统&lt;&#x2F;strong&gt;，而不是一个普通的程序。它包含了操作系统的核心组件，如进程管理、内存管理、文件系统、设备驱动等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-1&quot;&gt;问题1：&lt;&#x2F;h4&gt;
&lt;p&gt;为什么我可以在我的操作系统上同时运行xv6来进行学习呢？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-1&quot;&gt;回答1：&lt;&#x2F;h4&gt;
&lt;p&gt;xv6 是作为一个 &lt;strong&gt;虚拟机&lt;&#x2F;strong&gt; 运行的，而不是直接在你的物理硬件上运行。以下是详细的解释：&lt;&#x2F;p&gt;
&lt;p&gt;因为使用了 QEMU： - &lt;strong&gt;QEMU&lt;&#x2F;strong&gt;：一个开源的虚拟化工具，可以模拟完整的计算机硬件。
类似于vm所以可以运行&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;xv6-fen-shi-te-xing&quot;&gt;xv6 &lt;em&gt;分时特性&lt;&#x2F;em&gt; ：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;分时（Time-sharing）&lt;&#x2F;strong&gt; 是 xv6 的一个重要特性，允许多个进程共享 CPU 资源，通过快速切换进程来实现“同时运行”的效果。以下是 xv6 分时特性的具体实现：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;轮转调度算法&lt;&#x2F;strong&gt; ： &lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;zh-cn&#x2F;%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E8%B0%83%E5%BA%A6&quot;&gt;时间片轮转调度&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;上下文切换&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;多进程并发&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;系统调用支持&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;中断机制&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;关于 &lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;raind&#x2F;p&#x2F;10077982.html&quot; title=&quot;发布于 2018-12-06 17:26&quot;&gt;多CPU，多核，多进程，多线程&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wen-ti-2&quot;&gt;问题2：&lt;&#x2F;h4&gt;
&lt;p&gt;进程是怎么产生的？ 我们桌面上的一个软件点击打开的过程发生了什么&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-2&quot;&gt;回答2：&lt;&#x2F;h4&gt;
&lt;p&gt;(1) &lt;strong&gt;进程创建&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进程通常通过 &lt;strong&gt;系统调用&lt;&#x2F;strong&gt; 创建&lt;&#x2F;p&gt;
&lt;p&gt;(2) &lt;strong&gt;进程执行&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建子进程后，通常会用 &lt;code&gt;exec()&lt;&#x2F;code&gt; 系统调用来加载一个新的程序到子进程的内存中，并开始执行。&lt;&#x2F;p&gt;
&lt;p&gt;(3) &lt;strong&gt;进程终止&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程可以通过 &lt;code&gt;exit()&lt;&#x2F;code&gt; 系统调用主动终止，或者因为某些错误（如段错误）被操作系统强制终止。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;父进程可以通过 &lt;code&gt;wait()&lt;&#x2F;code&gt; 系统调用等待子进程终止，并回收子进程的资源。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fork-jin-cheng-chuang-jian&quot;&gt;fork() 进程创建&lt;&#x2F;h3&gt;
&lt;p&gt;一次调用会返回两次： 一次是 &lt;em&gt;父进程&lt;&#x2F;em&gt; 一次是 &lt;em&gt;子进程&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;示例代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys&amp;#x2F;types.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main() {
    pid_t pid;
    int x = 1;
    
    pid = fork();
    
    if (pid == 0) {
        &amp;#x2F;&amp;#x2F; Child process
        printf(&amp;quot;child: x = %d\n&amp;quot;, ++x);
        exit(0);
    } else if (pid &amp;gt; 0) {
        &amp;#x2F;&amp;#x2F; Parent process
        printf(&amp;quot;parent: x = %d\n&amp;quot;, x);
        exit(0);
    } else {
        &amp;#x2F;&amp;#x2F; Error in fork
        perror(&amp;quot;fork failed&amp;quot;);
        exit(1);
    }
    
    return 0;
}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;返回结果：&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;parent: x=0
child: x=2
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;em&gt;shell&lt;&#x2F;em&gt; 中 执行  &lt;em&gt;.&#x2F;hello&lt;&#x2F;em&gt;  ：&lt;&#x2F;p&gt;
&lt;p&gt;shell看为父进程， 程序hello看为子进程，&lt;&#x2F;p&gt;
&lt;p&gt;父子进程都有&lt;em&gt;各自的空间互不干扰&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;程序和进程的&lt;em&gt;区别&lt;&#x2F;em&gt;：&lt;&#x2F;p&gt;
&lt;p&gt;程序是代码 ： 存储在磁盘上  在&lt;em&gt;执行&lt;&#x2F;em&gt; 是程序以段的形式 &lt;em&gt;存在于在内存的地址空间&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进程&lt;em&gt;为正在执行中程序的具体实例&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进程状态：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;运行&lt;&#x2F;li&gt;
&lt;li&gt;暂停&lt;&#x2F;li&gt;
&lt;li&gt;终止&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;dui-bi&quot;&gt;对比&lt;&#x2F;h4&gt;
&lt;p&gt;对比fork 和 goroutine&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;特性&lt;&#x2F;th&gt;&lt;th&gt;&lt;code&gt;fork()&lt;&#x2F;code&gt;&lt;&#x2F;th&gt;&lt;th&gt;Goroutine&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;创建单位&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;进程&lt;&#x2F;td&gt;&lt;td&gt;轻量级线程&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;资源开销&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;高（复制整个进程）&lt;&#x2F;td&gt;&lt;td&gt;低（共享地址空间）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;通信方式&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;进程间通信（IPC）如管道、信号&lt;&#x2F;td&gt;&lt;td&gt;通道（channel）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;调度&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;操作系统调度&lt;&#x2F;td&gt;&lt;td&gt;Go 运行时调度&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;使用场景&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;需要完全独立执行的任务&lt;&#x2F;td&gt;&lt;td&gt;高并发任务&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;wen-ti-3&quot;&gt;问题3：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;如果有两个fork()函数在放在上下句 那么第一个fork出来的子进程是调用两次fork还是一次fork呢？&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-3&quot;&gt;回答3：&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第一个 &lt;code&gt;fork()&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：创建子进程 C1。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第二个 &lt;code&gt;fork()&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原始进程创建子进程 C2。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;子进程 C1 创建子进程 C3。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，第一个 &lt;code&gt;fork()&lt;&#x2F;code&gt; 创建的子进程 C1 会调用一次 &lt;code&gt;fork()&lt;&#x2F;code&gt;，创建子进程 C3。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用gcc编译程序&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;gcc  ~.c -o XXX&lt;&#x2F;p&gt;
&lt;p&gt;.&#x2F;XXX&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;理解这段程序的执行顺序&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys&amp;#x2F;types.h&amp;gt;
#include &amp;lt;sys&amp;#x2F;wait.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main() {
    pid_t pid;
    pid = fork();  &amp;#x2F;&amp;#x2F; 创建子进程

    if (pid &amp;gt; 0) {
        &amp;#x2F;&amp;#x2F; 父进程
        printf(&amp;quot;parent: waiting for child to finish\n&amp;quot;);
        pid_t child_pid = wait(NULL);  &amp;#x2F;&amp;#x2F; 等待子进程完成
        printf(&amp;quot;parent: child %d finished\n&amp;quot;, child_pid);
    } else if (pid == 0) {
        &amp;#x2F;&amp;#x2F; 子进程
        printf(&amp;quot;child: doing some work\n&amp;quot;);
        sleep(2);  &amp;#x2F;&amp;#x2F; 模拟子进程工作
        printf(&amp;quot;child: exiting\n&amp;quot;);
        exit(0);  &amp;#x2F;&amp;#x2F; 子进程退出
    } else {
        &amp;#x2F;&amp;#x2F; fork 错误
        printf(&amp;quot;fork error\n&amp;quot;);
    }

    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;pid_t child_pid = wait(NULL);  &#x2F;&#x2F; 等待子进程完成  &lt;em&gt;执行顺序&lt;&#x2F;em&gt;：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;parent: waiting for child to finish&lt;&#x2F;li&gt;
&lt;li&gt;打印else里面的pid == 0也就是 子进程： child: doing some work  child: exiting&lt;&#x2F;li&gt;
&lt;li&gt;wait收到了子进程的退出&lt;&#x2F;li&gt;
&lt;li&gt;parent: child %d finished&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;父子进程拥有不同的内存空间和寄存器，改变一个进程中的变量不会影响另一个进程。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;父进程和子进程唯一的区别：&lt;&#x2F;p&gt;
&lt;p&gt;fork()返回的的进程号不一样 也就是返回两个值 父进程大于0 子进程小于0&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exec&quot;&gt;exec()&lt;&#x2F;h3&gt;
&lt;p&gt;加载并执行一个新的程序,替换当前进程的镜像,将指定的可执行文件（如 &lt;code&gt;.&#x2F;a.out&lt;&#x2F;code&gt;）加载到当前进程的地址空间中。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加载程序&lt;&#x2F;strong&gt;：将指定的可执行文件（如 &lt;code&gt;.&#x2F;a.out&lt;&#x2F;code&gt;）加载到当前进程的地址空间中。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;替换当前进程映像&lt;&#x2F;strong&gt;：当前进程的代码、数据、堆栈等都会被新的程序替换。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;执行新程序&lt;&#x2F;strong&gt;：新程序开始执行，从其 &lt;code&gt;main()&lt;&#x2F;code&gt; 函数开始。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;不返回&lt;&#x2F;strong&gt;：一旦调用 &lt;code&gt;exec&lt;&#x2F;code&gt;，它会完全替换当前进程的执行代码，因此 &lt;strong&gt;不会返回到原来的代码&lt;&#x2F;strong&gt;（如果成功执行 &lt;code&gt;exec&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;示例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main() {
    char *args[] = {&amp;quot;&amp;#x2F;bin&amp;#x2F;ls&amp;quot;, &amp;quot;-l&amp;quot;, NULL};  &amp;#x2F;&amp;#x2F; 执行的程序及参数
    execv(&amp;quot;&amp;#x2F;bin&amp;#x2F;ls&amp;quot;, args);  &amp;#x2F;&amp;#x2F; 使用 execv 执行 ls 命令
    return 0;  &amp;#x2F;&amp;#x2F; 如果 execv 执行成功，这行代码永远不会被执行
}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;code&gt;sleep 2000&lt;&#x2F;code&gt;  执行这句指令 的父进程是bash终端
&lt;code&gt;pstree -p&lt;&#x2F;code&gt; 查看进程树
&lt;code&gt;echo $$&lt;&#x2F;code&gt;    是输出当前 shell 进程的 PID，这在一些进程管理和调试过程中很有用&lt;&#x2F;p&gt;
&lt;p&gt;结合 exec&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;exec sleep 200&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这样使sleep进程替换了原来的bash进程
如果此时终止睡眠则终端直接关闭，因为sleep进程替换了bash进程&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;vim test.sh&lt;&#x2F;code&gt; shell脚本&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;#! &amp;#x2F;bin&amp;#x2F;bash

sleep 200
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加执行权限：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;chmod +x test.sh&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;test&#x2F;sh&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;执行脚本相当于： 用当前交互的Shell运行了一个shell子进程&lt;&#x2F;p&gt;
&lt;h4 id=&quot;i-o-he-wen-jian-miao-shu-fu&quot;&gt;I&#x2F;O 和文件描述符&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;文件描述符&lt;&#x2F;strong&gt;是一个整数，它代表了一个进程可以读写的被内核管理的对象&lt;&#x2F;p&gt;
&lt;p&gt;文件描述符指向的对象称为“文件”&lt;&#x2F;p&gt;
&lt;p&gt;可以理解为key value 一个整数或者几个整数 对应一个文件&lt;&#x2F;p&gt;
&lt;p&gt;文件描述符和进程相伴相生&lt;&#x2F;p&gt;
&lt;p&gt;每个进程都有一个从0开始的文件描述符空间&lt;&#x2F;p&gt;
&lt;p&gt;0 1 2&lt;&#x2F;p&gt;
&lt;p&gt;0： 标准输入： 键盘对应的存储空间&lt;&#x2F;p&gt;
&lt;p&gt;1： 标准输出 ： 输出到屏幕所对应的存储空间&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;test &amp;gt; test.txt&lt;&#x2F;code&gt; 将 程序 结果输出 到 文本文件中&lt;&#x2F;p&gt;
&lt;p&gt;2： 标准出错 ： 出错信息打印到屏幕&lt;&#x2F;p&gt;
&lt;p&gt;shell 保证在任何时候都有3个打开的文件描述符（8007），他们是控制台（console）的默认文件描述符&lt;&#x2F;p&gt;
&lt;p&gt;系统调用 &lt;code&gt;read&lt;&#x2F;code&gt; 和 &lt;code&gt;write&lt;&#x2F;code&gt; 从文件描述符所指的文件中读或者写 n 个字节  &lt;code&gt;read(fd, buf, n)&lt;&#x2F;code&gt; 从 &lt;code&gt;fd&lt;&#x2F;code&gt; 读最多 n 个字节 将它们拷贝到 &lt;code&gt;buf&lt;&#x2F;code&gt; 中，然后返回读出的字节数&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;write(fd, buf, n)&lt;&#x2F;code&gt; 写 &lt;code&gt;buf&lt;&#x2F;code&gt; 中的 n 个字节到 &lt;code&gt;fd&lt;&#x2F;code&gt; 并且返回实际写出的字节数&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cat&lt;&#x2F;code&gt; 的本质实现:&lt;&#x2F;p&gt;
&lt;p&gt;将数据从标准输入复制到标准输出&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;if(fork() == 0) {
    write(1, &amp;quot;hello &amp;quot;, 6);
    exit();
} else {
    wait();
    write(1, &amp;quot;world\n&amp;quot;, 6);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;dup&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;p&gt;复制一个已有的文件描述符，返回一个指向同一个输入&#x2F;输出对象的新描述符&lt;&#x2F;p&gt;
&lt;p&gt;示例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;fd = dup(1);
write(1, &amp;quot;hello&amp;quot;, 6);
write(fd, &amp;quot;world\n&amp;quot;, 6);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;dup()&lt;&#x2F;code&gt; 主要用来复制文件描述符，方便使用多个描述符来操作同一个文件或 I&#x2F;O 对象。它广泛用于 I&#x2F;O 重定向、进程间共享文件描述符等场景。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;guan-yu-zuo-ti-zhi-qian-de-yi-xie-jian-yi&quot;&gt;关于做题之前的一些建议&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;了解对指针的运算&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;p[i] = *(p + i)&lt;&#x2F;p&gt;
&lt;p&gt;(int)p + 1，(int)(p + 1)&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;gdb调试&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;make qemu-gdb&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当 内核悬挂（例如，由于僵局）或无法进一步执行&lt;&#x2F;p&gt;
&lt;p&gt;使用GDB来找出其悬挂的位置 ：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;run &#x27;make qemu-gdb&#x27; in one window&lt;&#x2F;em&gt;  , &lt;em&gt;run gdb (riscv64-linux-gnu-gdb) in another windows&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;理解程序：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;char*
strcpy(char *s, const char *t)
{
  char *os;

  os = s;
  while((*s++ = *t++) != 0)
    ;
  return os;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;make grade&lt;&#x2F;code&gt;  查看所有程序是否通过&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;grade-lab-util sleep&lt;&#x2F;code&gt;  单独 运行某个程序  &lt;code&gt;or&lt;&#x2F;code&gt;   &lt;code&gt;make GRADEFLAGS=sleep grade&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;快速查找：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;grep &quot;关键字&quot; 文件名&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;1-xia-zai-qemuman&quot;&gt;1. 下载qemu慢&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt; cd &#x2F;mnt&#x2F;c&#x2F;Users&#x2F;30413&#x2F;Downloads&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在wsl 可以 转换到本地目录&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt; cp qemu-7.2.16.tar.xz ~&lt;&#x2F;code&gt;直接就过来了&lt;&#x2F;p&gt;
&lt;p&gt;在wsl中下载qemu实在是太慢了&lt;&#x2F;p&gt;
&lt;p&gt;解压：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;tar xvJf qemu-7.2.16.tar.xz -C &#x2F;opt&#x2F;qemu&lt;&#x2F;code&gt;
&lt;code&gt;tar tvJf qemu-7.2.16.tar.xz&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;成功运行了！&lt;&#x2F;p&gt;
&lt;h4 id=&quot;2-make-grade&quot;&gt;2.&lt;code&gt;make grade&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;解决xv6无法&lt;code&gt; make grade&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;参考仓库：&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;github.com&#x2F;heeyoung-choi&#x2F;xv6-lab&#x2F;blob&#x2F;main&#x2F;Makefile&lt;&#x2F;p&gt;
&lt;p&gt;强制删除在git中嵌套的仓库，以避免推送出现问题&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;git rm -f --cached xv6-public&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;sleep-c&quot;&gt;sleep.c&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;quot;kernel&amp;#x2F;types.h&amp;quot;
#include &amp;quot;kernel&amp;#x2F;stat.h&amp;quot;
#include &amp;quot;user&amp;#x2F;user.h&amp;quot;

int
main(int argc, char *argv[])
{
    if (argc &amp;lt; 2 || argc &amp;gt; 2 )
    {
    write(2,&amp;quot;only 1 arguments place write again\n&amp;quot;,36);
    exit(1);
    }
    sleep(atoi(argv[1]));
    exit(0);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guan-dao&quot;&gt;管道&lt;&#x2F;h3&gt;
&lt;p&gt;pipe() &lt;strong&gt;创建了一个文件&lt;&#x2F;strong&gt; 放在内存中 特殊的文件可供读写的一段存储空间&lt;&#x2F;p&gt;
&lt;p&gt;使用文件描述符去操作管道
int fd[2]：&lt;&#x2F;p&gt;
&lt;p&gt;fd的两个元素 fd[0]读取内容 fd[1]写内容 两个文件描述符操作一个管道&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;操作系统对于文件描述符的分配： 在所有的整数中取最小的整数 0 1 2 被使用过了 所以是 3和4分别为 fd[0] fd[1]&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pipe(fd)&lt;&#x2F;p&gt;
&lt;p&gt;示例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;fcntl.h&amp;gt;
#include&amp;lt;unistd.h&amp;gt;
#include&amp;lt;string.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;

int main() {
    int fd[2];
    pipe (fd);
    int pid = fork();
   if (pid == 0) {
    &amp;#x2F;&amp;#x2F;char* receive = (char*) malloc (100*sizeof(char));
    int *num = (int*) malloc (2*sizeof(int));
    read(fd[0], num, 2*sizeof(int));
    &amp;#x2F;&amp;#x2F;printf(&amp;quot;form father receive is :%s&amp;quot;,receive);
    printf(&amp;quot;the receive is %d,%d\n&amp;quot;,*num,*(num + 1));
   }
   else {
   &amp;#x2F;&amp;#x2F;char test[] = &amp;quot;hello world&amp;quot;;
   int num[4] = {8,4,2,1};
   write(fd[1],num,4*sizeof(int));
   }
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dup()&lt;&#x2F;code&gt; 系统调用用于复制一个文件描述符。 会创建一个新的文件描述符，指向与原始文件描述符相同的文件或资源。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;li-jie-ming-ling-wc&quot;&gt;理解命令wc&lt;&#x2F;h4&gt;
&lt;p&gt;示例程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;int p[2];
char *argv[2];
argv[0] = &amp;quot;wc&amp;quot;;
argv[1] = 0;
pipe(p);
if(fork() == 0) {
    close(0);
    dup(p[0]); &amp;#x2F;&amp;#x2F;利用文件描述符性质，这个dup会占用最小整数0的文件描述符
    close(p[0]);
    close(p[1]);
    exec(&amp;quot;&amp;#x2F;bin&amp;#x2F;wc&amp;quot;, argv);
} else {
    write(p[1], &amp;quot;hello world\n&amp;quot;, 12);
    close(p[0]);
    close(p[1]);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;wen-ti&quot;&gt;问题：&lt;&#x2F;h4&gt;
&lt;p&gt;为什么要close(0)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;当打开一个新文件或复制一个文件描述符时，系统会分配 &lt;strong&gt;最小的可用文件描述符&lt;&#x2F;strong&gt;。
例如：
&lt;ul&gt;
&lt;li&gt;如果文件描述符 &lt;code&gt;0&lt;&#x2F;code&gt; 被关闭，那么下一个可用的文件描述符就是 &lt;code&gt;0&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;如果文件描述符 &lt;code&gt;0&lt;&#x2F;code&gt; 已经被占用，系统会分配下一个可用的文件描述符（如 &lt;code&gt;3&lt;&#x2F;code&gt;、&lt;code&gt;4&lt;&#x2F;code&gt; 等）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;为什么不直接使用p[0]呢？？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jie-da&quot;&gt;解答：&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;确保 &lt;code&gt;dup(p[0])&lt;&#x2F;code&gt; 复制到文件描述符 &lt;code&gt;0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果不关闭标准输入，文件描述符 &lt;code&gt;0&lt;&#x2F;code&gt; 仍然指向默认的标准输入（通常是终端）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;dup(p[0])&lt;&#x2F;code&gt; 时，系统会分配一个可用的文件描述符（如 &lt;code&gt;3&lt;&#x2F;code&gt;），而不是文件描述符 &lt;code&gt;0&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;这样，&lt;code&gt;wc&lt;&#x2F;code&gt; 命令仍然会从终端读取输入，而不是从管道读取数据。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;wc&lt;&#x2F;code&gt; 命令默认从 标准输入（文件描述符 &lt;code&gt;0&lt;&#x2F;code&gt;） 读取数据&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果直接使用 &lt;code&gt;p[0]&lt;&#x2F;code&gt;，&lt;code&gt;wc&lt;&#x2F;code&gt; 仍然会从标准输入读取数据，而不是从 &lt;code&gt;p[0]&lt;&#x2F;code&gt; 读取。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;这意味着 &lt;code&gt;wc&lt;&#x2F;code&gt; 会等待用户从终端输入数据，而不是从管道读取数据。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;（2）文件描述符的语义&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;文件描述符 &lt;code&gt;0&lt;&#x2F;code&gt; 是标准输入，许多程序（如 &lt;code&gt;wc&lt;&#x2F;code&gt;、&lt;code&gt;cat&lt;&#x2F;code&gt; 等）都依赖于这一约定。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果直接使用 &lt;code&gt;p[0]&lt;&#x2F;code&gt;，需要修改 &lt;code&gt;wc&lt;&#x2F;code&gt; 的源代码，使其从 &lt;code&gt;p[0]&lt;&#x2F;code&gt; 读取数据，而不是标准输入。这是不现实的，因为无法修改所有命令行工具的源代码。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wc&lt;&#x2F;code&gt; 命令仍然从标准输入读取数据，但它实际上是从管道读取数据。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总结： 关闭标准输入并使用 &lt;code&gt;dup(p[0])&lt;&#x2F;code&gt; 的目的是将管道的读端重定向到标准输入。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+D&lt;&#x2F;code&gt;，如果你在命令行直接按 &lt;code&gt;Ctrl+D&lt;&#x2F;code&gt;，用于表示 &lt;strong&gt;End of File (EOF, 文件结束)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pingpong-c&quot;&gt;pingpong.c&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;quot;kernel&amp;#x2F;types.h&amp;quot;
#include &amp;quot;kernel&amp;#x2F;stat.h&amp;quot;
#include &amp;quot;user&amp;#x2F;user.h&amp;quot;


int
main(int argc,char* argv[])
{
int fd[2];
pipe(fd);

if (fork() == 0)
{
read(fd[0],&amp;quot;received ping\n&amp;quot;,14);
close(fd[1]);
write(fd[1],&amp;quot;pong&amp;quot;,4);
exit(0)
}else
{
write(fd[1],&amp;quot;ping&amp;quot;,4);
close(fd[0]);
read(fd[0],&amp;quot;recdived pong\n&amp;quot;,5);
close(fd[0]);
}
wait(0);
exit(0);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一次写出来的 错误代码！&lt;&#x2F;p&gt;
&lt;p&gt;最终修改：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;quot;kernel&amp;#x2F;types.h&amp;quot;
#include &amp;quot;kernel&amp;#x2F;stat.h&amp;quot;
#include &amp;quot;user&amp;#x2F;user.h&amp;quot;

&amp;#x2F;*对于错误处理第一次整体都没有判断 read write pipe*&amp;#x2F;
int
main(int argc,char* argv[])
{

char buf[5];
int fd[2];

if (pipe(fd) &amp;lt; 0)
{
fprintf(2, &amp;quot;pipe failed\n&amp;quot;);
exit(1);
}

if (fork() == 0)
{
read(fd[0],buf,4);
buf[4] = &amp;#x27;\0&amp;#x27;;
printf(&amp;quot;%d received %s\n&amp;quot;,getpid(),buf);
close(fd[0]);
write(fd[1],&amp;quot;pong&amp;quot;,4);
close(fd[1]);
exit(0);
}else
{
write(fd[1],&amp;quot;ping&amp;quot;,4);
close(fd[1]);
read(fd[0],buf,4);
buf[4] = &amp;#x27;\0&amp;#x27;; &amp;#x2F;&amp;#x2F; 添加空字符 忘记添加了
printf(&amp;quot;%d: received %s\n&amp;quot;,getpid(),buf);
close(fd[0]);
}
wait(0);
exit(0);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;我觉得这段程序可能会导致父子进程之间的相互竞争&lt;&#x2F;em&gt; 事实可能也是这样&lt;&#x2F;p&gt;
&lt;p&gt;重点：&lt;&#x2F;p&gt;
&lt;p&gt;正确使用 &lt;code&gt;pipe&lt;&#x2F;code&gt;、&lt;code&gt;fork&lt;&#x2F;code&gt;、&lt;code&gt;read&lt;&#x2F;code&gt; 和 &lt;code&gt;write&lt;&#x2F;code&gt;，以及关闭文件描述符和等待子进程完成&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;quot;kernel&amp;#x2F;types.h&amp;quot;
#include &amp;quot;kernel&amp;#x2F;stat.h&amp;quot;
#include &amp;quot;user&amp;#x2F;user.h&amp;quot;

int
main(int argc, char *argv[])
{
  int p1[2];
  int p2[2];
  if (-1 == pipe(p1) || -1 == pipe(p2)) {
    write(2, &amp;quot;error\n&amp;quot;, 6);
  }

  if (fork() == 0) {
    char buf[1];
    read(p2[0], buf, 1);
    printf(&amp;quot;%d: received ping\n&amp;quot;, getpid());
    write(p1[1], &amp;quot;x&amp;quot;, 1);
  } else {
    write(p2[1], &amp;quot;x&amp;quot;, 1);
    char buf[1];
    read(p1[0], buf, 1);
    printf(&amp;quot;%d: received pong\n&amp;quot;, getpid());
  }
  exit(0);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是取巧的一段代码&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;第一次程序出现的问题：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;父进程没有等待子进程完成&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;父进程在读取 &lt;code&gt;pong&lt;&#x2F;code&gt; 后直接退出，没有调用 &lt;code&gt;wait(0)&lt;&#x2F;code&gt; 等待子进程完成。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;这可能导致子进程的输出被截断，或者父进程提前退出。
&lt;strong&gt;第二次程序：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;添加wait（）等待子进程完成操作，避免造成竞争&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;wen-jian-miao-shu-fu-de-yi-huo&quot;&gt;文件描述符的疑惑&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;if(fork() == 0) {
    write(1, &amp;quot;hello &amp;quot;, 6);
    exit();
} else {
    wait();
    write(1, &amp;quot;world\n&amp;quot;, 6);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段程序子进程使用1这个文件描述符后没有关闭，会不会导致父进程无法使用1这个文件描述符呢&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jie-da-1&quot;&gt;解答：&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code&gt;每个进程都有自己独立的文件描述符表。子进程通过 `fork()` 创建时，会继承父进程的文件描述符表，但子进程和父进程的文件描述符是相互独立的。子进程对文件描述符的操作（如写入、关闭）不会影响父进程的文件描述符。

当子进程调用 `exit()` 退出时，操作系统会关闭子进程打开的所有文件描述符。这些关闭操作仅限于子进程，不会影响父进程的文件描述符。
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为：&lt;&#x2F;p&gt;
&lt;p&gt;每个进程可以打开的文件描述符数量是有限的（由系统配置决定，可以通过 &lt;code&gt;ulimit -n&lt;&#x2F;code&gt; 查看）。如果不关闭文件描述符，可能会导致文件描述符泄漏，最终耗尽系统资源。&lt;&#x2F;p&gt;
&lt;p&gt;在编写pingpong.c时：&lt;&#x2F;p&gt;
&lt;p&gt;因为是对&lt;em&gt;管道的读写&lt;&#x2F;em&gt;，&lt;em&gt;管道的读写&lt;&#x2F;em&gt;操作是阻塞的。如果不关闭文件描述符，可能会导致进程一直等待，无法正常结束。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果父进程不关闭 &lt;code&gt;fd[1]&lt;&#x2F;code&gt;，子进程的 &lt;code&gt;read(fd[0], buf, 4)&lt;&#x2F;code&gt; 可能会一直等待，因为父进程的 &lt;code&gt;fd[1]&lt;&#x2F;code&gt; 仍然打开，子进程无法确定父进程是否已经完成写入。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果子进程不关闭 &lt;code&gt;fd[1]&lt;&#x2F;code&gt;，父进程的 &lt;code&gt;read(fd[0], buf, 4)&lt;&#x2F;code&gt; 可能会一直等待，因为子进程的 &lt;code&gt;fd[1]&lt;&#x2F;code&gt; 仍然打开，父进程无法确定子进程是否已经完成写入。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;管道的设计遵循以下规则：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果写入端（&lt;code&gt;fd[1]&lt;&#x2F;code&gt;）关闭，读取端（&lt;code&gt;fd[0]&lt;&#x2F;code&gt;）的 &lt;code&gt;read()&lt;&#x2F;code&gt; 会返回 &lt;code&gt;0&lt;&#x2F;code&gt;，表示没有更多数据可读（即文件结束，EOF）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果读取端（&lt;code&gt;fd[0]&lt;&#x2F;code&gt;）关闭，写入端（&lt;code&gt;fd[1]&lt;&#x2F;code&gt;）的 &lt;code&gt;write()&lt;&#x2F;code&gt; 会触发 &lt;code&gt;SIGPIPE&lt;&#x2F;code&gt; 信号，通常导致写入进程终止。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;这并不是通过信号实现的&lt;&#x2F;strong&gt;，而是通过管道的文件描述符状态实现的。
如果父进程关闭了 &lt;code&gt;fd[1]&lt;&#x2F;code&gt;，子进程的 &lt;code&gt;read()&lt;&#x2F;code&gt; 会返回 &lt;code&gt;0&lt;&#x2F;code&gt;，表示管道已经关闭，没有更多数据可读。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xin-hao-yu-guan-dao-de-qu-bie&quot;&gt;&lt;strong&gt;信号与管道的区别&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信号&lt;&#x2F;strong&gt;：是一种异步通知机制，用于通知进程发生了某些事件（如 &lt;code&gt;SIGINT&lt;&#x2F;code&gt;、&lt;code&gt;SIGTERM&lt;&#x2F;code&gt; 等）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;管道&lt;&#x2F;strong&gt;：是一种同步通信机制，通过文件描述符的状态（如关闭写入端）来通知读取端&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;wen-jian-xi-tong&quot;&gt;文件系统&lt;&#x2F;h3&gt;
&lt;p&gt;文件就是一个简单的字节数组，&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chdir()&lt;&#x2F;code&gt; 是一个系统调用，用于改变当前进程的工作目录。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;primes-c&quot;&gt;primes.c&lt;&#x2F;h3&gt;
&lt;p&gt;第一次尝试&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;void fork(int *father_pipe)
{
    int n;
    int pid = fork();
    int son_pipe[2];
    pipe[son_pipe];

    if (pid == 0)
    {
        while (1)
        {
            read(father_pipe[0], &amp;amp;n, sizeof(n));
            for (int i = 2; i &amp;lt; 35; i++)
            {
                if (n % i != 0)
                {
                    write(son_pipe[1], &amp;amp;n, sizeof(n));
                }
            }
        }
        close(father_pipe[0]);
        close(son_pipe[1]);
    }
    else
    {
        int st;
        wait(&amp;amp;st);
    }
}

int main(int argc, char *argv[])
{
    int fd[2];
    int buf[36];
    pipe[fd];

    for (int i = 2; i &amp;lt;= 35; i++)
    {
        write(fd[1], &amp;amp;i, sizeof(i));
    }
    close(fd[1]);
    f(fd);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我的思想：&lt;&#x2F;p&gt;
&lt;p&gt;父亲传入数据到管道的时候，在函数中应该需要先&lt;em&gt;fork出一个子进程&lt;&#x2F;em&gt; 来与&lt;em&gt;父进程通信&lt;&#x2F;em&gt;读取，并且我对从管道中读取数据也有点模糊，是一口气全部读出来，还是一个个读取然后做处理，我是想对所有的数字依次被2-35除然后筛选一层层向子进程传递，并最终打印出最终结果&lt;&#x2F;p&gt;
&lt;p&gt;以下是我的想法，并能求出的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;quot;kernel&amp;#x2F;types.h&amp;quot;
#include &amp;quot;kernel&amp;#x2F;stat.h&amp;quot;
#include &amp;quot;user&amp;#x2F;user.h&amp;quot;
#include &amp;quot;stddef.h&amp;quot;


void create_child(int *input_pipe, int divisor) {
    int output_pipe[2];
    pipe(output_pipe); &amp;#x2F;&amp;#x2F; 创建输出管道

    int pid = fork(); &amp;#x2F;&amp;#x2F; 创建子进程
    if (pid == 0) {
        &amp;#x2F;&amp;#x2F; 子进程
        close(input_pipe[1]); &amp;#x2F;&amp;#x2F; 关闭父进程的写入端
        close(output_pipe[0]); &amp;#x2F;&amp;#x2F; 关闭子进程的读取端

        int num;
        while (read(input_pipe[0], &amp;amp;num, sizeof(num)) &amp;gt; 0) {
            if (num % divisor != 0 || num == divisor) {
                &amp;#x2F;&amp;#x2F; 如果不能被当前除数整除，或者数字是当前除数本身，传递给下一个子进程
                write(output_pipe[1], &amp;amp;num, sizeof(num));
            }
        }

        close(input_pipe[0]); &amp;#x2F;&amp;#x2F; 关闭父进程的读取端
        close(output_pipe[1]); &amp;#x2F;&amp;#x2F; 关闭子进程的写入端
        exit(0);
    } else {
        &amp;#x2F;&amp;#x2F; 父进程
        close(input_pipe[0]); &amp;#x2F;&amp;#x2F; 关闭父进程的读取端
        close(output_pipe[1]); &amp;#x2F;&amp;#x2F; 关闭子进程的写入端

        if (divisor &amp;gt;= 35) {
            int num;
            while (read(output_pipe[0], &amp;amp;num, sizeof(num)) &amp;gt; 0) {
                printf(&amp;quot;prime %d\n&amp;quot;, num); &amp;#x2F;&amp;#x2F; 打印质数
            }
            close(output_pipe[0]); &amp;#x2F;&amp;#x2F; 关闭读取端
        } else {
            &amp;#x2F;&amp;#x2F; 将子进程的输出管道作为下一个子进程的输入管道
            create_child(output_pipe, divisor + 1);
        }
    }
}

int main() {
    int fd[2];
    pipe(fd); &amp;#x2F;&amp;#x2F; 创建初始管道

    &amp;#x2F;&amp;#x2F; 将数字 2 到 35 写入管道
    for (int i = 2; i &amp;lt;= 35; i++) {
        write(fd[1], &amp;amp;i, sizeof(i));
    }
    close(fd[1]); &amp;#x2F;&amp;#x2F; 关闭写入端

    &amp;#x2F;&amp;#x2F; 创建第一个子进程，从 2 开始筛选
    create_child(fd, 2);

    &amp;#x2F;&amp;#x2F; 父进程等待所有子进程结束
    while (wait(NULL) &amp;gt; 0);

    return 0;
}这段程序并不能正常打印出6.s081课程的素数题目的最终结果，我还应该怎么修改？
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段程序的错误：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;筛选条件&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;递归逻辑问题：&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;正确的做法应该是每个子进程从输入管道中读取第一个数作为新的&lt;code&gt;divisor&lt;&#x2F;code&gt;（质数），然后用它筛选后续的数。而原代码强制&lt;code&gt;divisor&lt;&#x2F;code&gt;递增，导致后续进程可能使用非质数作为除数&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;打印时机：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;只有当&lt;code&gt;divisor &amp;gt;=35&lt;&#x2F;code&gt;时，父进程才会读取&lt;code&gt;output_pipe&lt;&#x2F;code&gt;并打印结果。这意味着只有最后一个进程才会打印，而实际上每个进程应负责打印自己筛选出的质数（即第一个接收到的数）&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wen-ti-1-1&quot;&gt;问题 1：&lt;&#x2F;h4&gt;
&lt;p&gt;read(input_pipe[0], &amp;amp;num, sizeof(num)) &amp;gt; 0 我并不理解有时候 在read和write中括号后面时常会出现 &amp;gt;0 =0 &amp;lt;0 都是什么意思？ 用while循环的目的又是什么&lt;&#x2F;p&gt;
&lt;p&gt;如何处理对于本身 例如： 2 % 2 == 0 ！&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jie-da-1-1&quot;&gt;解答 1：&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;read：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;gt; 0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：成功读取了数据，返回值是实际读取的字节数。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;= 0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：读取到文件结束（EOF），表示写入端已经关闭，没有更多数据可读。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt; 0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：读取失败，通常是由于错误（如文件描述符无效、管道被意外关闭等）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;write：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;gt; 0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：成功写入了数据，返回值是实际写入的字节数。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;= 0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：没有写入任何数据（通常不会发生，除非 &lt;code&gt;count&lt;&#x2F;code&gt; 为 0）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt; 0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：写入失败，通常是由于错误（如文件描述符无效、管道被意外关闭等）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;while (read(input_pipe[0], &amp;amp;num, sizeof(num)) &amp;gt; 0)&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;持续从 &lt;code&gt;input_pipe[0]&lt;&#x2F;code&gt; 中读取数据。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果读取成功（&lt;code&gt;read()&lt;&#x2F;code&gt; 返回 &lt;code&gt;&amp;gt; 0&lt;&#x2F;code&gt;），则处理数据。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;回答2：&lt;&#x2F;p&gt;
&lt;p&gt;直接传递给下一个进程&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wen-ti-2-1&quot;&gt;问题 2：&lt;&#x2F;h4&gt;
&lt;p&gt;不理解这里的&lt;em&gt;数据是一次性全部传入管道一次性读取还是 父进程传入一个数据经过处理后然后再读取&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jie-da-2&quot;&gt;解答 2：&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;理解管道特性&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;管道是一种 &lt;strong&gt;先进先出（FIFO）&lt;&#x2F;strong&gt; 的通信机制。数据写入管道后，会按照写入的顺序依次被读取。管道的读写是 &lt;strong&gt;阻塞的&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果管道为空，读取端会阻塞，直到有数据写入。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果管道已满，写入端会阻塞，直到有数据被读取。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;代码中数据是一次性全部写入管道的， 当父进程&lt;em&gt;关闭写入端，表示数据写入完成&lt;&#x2F;em&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;子进程从管道中 &lt;strong&gt;逐个读取数据&lt;&#x2F;strong&gt;，而不是一次性读取所有数据。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;每读取一个数据，就根据 &lt;code&gt;divisor&lt;&#x2F;code&gt; 进行筛选，并将筛选后的数据写入下一个管道。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;子进程：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逐个处理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个子进程从管道中 &lt;strong&gt;逐个读取数据&lt;&#x2F;strong&gt;，处理后再写入下一个管道。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;数据是 &lt;strong&gt;流式处理&lt;&#x2F;strong&gt; 的，而不是一次性全部读取。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;批量处理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果管道中有多个数据，子进程会逐个读取并处理，直到管道为空。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;he-xin-dai-ma&quot;&gt;核心代码：&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt; while (read(input_pipe[0], &amp;amp;num, sizeof(num)) &amp;gt; 0) {
            if (num == divisor) {
                &amp;#x2F;&amp;#x2F; 如果是当前除数本身，直接传递给下一个子进程
                write(output_pipe[1], &amp;amp;num, sizeof(num));
            } else if (num % divisor != 0) {
                &amp;#x2F;&amp;#x2F; 如果不能被当前除数整除，传递给下一个子进程
                write(output_pipe[1], &amp;amp;num, sizeof(num));
            }
        }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为什么可以持续的读，可以自动检测读完吗？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt; while (read(output_pipe[0], &amp;amp;num, sizeof(num)) &amp;gt; 0) {
                printf(&amp;quot;primes: %d\n&amp;quot;, num); &amp;#x2F;&amp;#x2F; 打印质数
            }
            close(output_pipe[0]); &amp;#x2F;&amp;#x2F; 关闭读取端
        } else {
            &amp;#x2F;&amp;#x2F; 将子进程的输出管道作为下一个子进程的输入管道
            create_child(output_pipe, divisor + 1);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;重点解释：&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;管道的写入端关闭

 当父进程写入数据并关闭写入端时，管道的写入端会被标记为关闭。
    
 关闭写入端后，读取端的 `read()` 行为会发生变化：
    
 如果管道中还有数据，`read()` 会继续读取数据。
        
 如果管道中没有数据，`read()` 会返回 `0`，表示写入端已经关闭，没有更多数据可读。
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;- 管道的内部实现会跟踪写入端的状态。
    
- 当写入端关闭时，操作系统会通知读取端，表示没有更多数据会写入管道。
    
- 如果读取端尝试读取数据，但管道中没有数据且写入端已关闭，`read()` 会返回 `0`。
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;chu-hu-yi-liao&quot;&gt;出乎意料&lt;&#x2F;h4&gt;
&lt;p&gt;这段程序并没有成功打印出结果！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;重新修改 primes.c&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;quot;kernel&amp;#x2F;types.h&amp;quot;
#include &amp;quot;kernel&amp;#x2F;stat.h&amp;quot;
#include &amp;quot;user&amp;#x2F;user.h&amp;quot;

void create_child(int parent_fd[]) {
    int p;
    &amp;#x2F;&amp;#x2F; 读取第一个数字，它一定是质数
    if (read(parent_fd[0], &amp;amp;p, sizeof(p)) == 0) {
        close(parent_fd[0]);
        exit(0);
    }
    printf(&amp;quot;prime %d\n&amp;quot;, p); &amp;#x2F;&amp;#x2F; 立即打印当前质数

    int child_fd[2];
    pipe(child_fd);

    if (fork() == 0) {
        &amp;#x2F;&amp;#x2F; 子进程：关闭不必要的文件描述符，递归处理
        close(parent_fd[0]);
        close(child_fd[1]);
        create_child(child_fd);
        exit(0);
    } else {
        &amp;#x2F;&amp;#x2F; 父进程：过滤并传递剩余数字
        close(child_fd[0]);
        int num;
        while (read(parent_fd[0], &amp;amp;num, sizeof(num)) &amp;gt; 0) {
            if (num % p != 0) {
                write(child_fd[1], &amp;amp;num, sizeof(num));
            }
        }
        close(parent_fd[0]);
        close(child_fd[1]);
        wait(0); &amp;#x2F;&amp;#x2F; 等待子进程结束
    }
}

int main() {
    int initial_fd[2];
    pipe(initial_fd);

    for (int i = 2; i &amp;lt;= 35; i++) {
        write(initial_fd[1], &amp;amp;i, sizeof(i));
    }
    close(initial_fd[1]);

    create_child(initial_fd);

    &amp;#x2F;&amp;#x2F; 确保所有子进程结束
    while (wait(0) &amp;gt; 0);
    exit(0);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;疑问：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;while (read(parent_fd[0], &amp;amp;num, sizeof(num)) &amp;gt; 0) { if (num % p != 0) { write(child_fd[1], &amp;amp;num, sizeof(num)); } } 
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段程序不是也会把2等过滤掉吗&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;管道是队列结构&lt;&#x2F;strong&gt;​&lt;br &#x2F;&gt;
管道（Pipe）本质上是一个&lt;strong&gt;先进先出（FIFO）的字节流&lt;&#x2F;strong&gt;。每次调用 &lt;code&gt;read&lt;&#x2F;code&gt; 读取数据时，读取过的数据会从管道中移除，后续的 &lt;code&gt;read&lt;&#x2F;code&gt; 操作只会读取未被读取的数据。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-chu-zhong-ding-xiang&quot;&gt;输出重定向&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;redirect-c&quot;&gt;redirect.c&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;7d19d7e4-f139-4902-8975-65a70cc2d956&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;你不必成为专家， 你花费大量时间开发维护和调试，会了解很多操作系统的知识，
ls &amp;gt; out 输出重定向
echo hello &amp;gt; out
cat &amp;lt; out
子进程调用exit(1) -&amp;gt; 父进程会接受到子进程的退出&lt;br &#x2F;&gt;
exec会丢弃所有复制的内存，并将其替换为
思考fork的副本复制 复制了所有的内存 所花费的时间
虚拟内存映射
为子进程分配权重&lt;&#x2F;p&gt;
&lt;p&gt;观看完第一集视频，看完第一章内容，还剩两道题没有做&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;find-c&quot;&gt;find.c&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;li-jie-ls-c-cheng-xu&quot;&gt;&lt;em&gt;理解 ls.c 程序：&lt;&#x2F;em&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;em&gt;理解 ls.c 程序：&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;......写起来有点费劲，不太理解&lt;&#x2F;p&gt;
&lt;p&gt;寻求博客帮助：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sheniao.top&#x2F;os&#x2F;68.html#morphing&quot;&gt;有帮助的博客1.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;diana-learningcpp&#x2F;p&#x2F;15579535.html&quot;&gt;有帮助的博客2.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在 Linux 中，只使用 ls 并不会显示 &lt;code&gt;.&lt;&#x2F;code&gt; 和 &lt;code&gt;..&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;-a：显示所有文件及目录 (ls 内定将文件名或目录名称开头为 &quot;.&quot; 的视为隐藏档，不会列出)&lt;&#x2F;li&gt;
&lt;li&gt;-A：同 -a ，但不列出 &quot;.&quot; (目前目录) 及 &quot;..&quot; (父目录)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ls.c程序&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;fmtname()&lt;&#x2F;code&gt; 函数&lt;&#x2F;strong&gt;：格式化文件名。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ls()&lt;&#x2F;code&gt; 函数&lt;&#x2F;strong&gt;：遍历目录并打印文件信息。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;main()&lt;&#x2F;code&gt; 函数&lt;&#x2F;strong&gt;：解析命令行参数并调用 &lt;code&gt;ls()&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;fmtname()&lt;&#x2F;code&gt; 函数&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;char* fmtname(char *path) {
    static char buf[DIRSIZ+1];
    char *p;

    &amp;#x2F;&amp;#x2F; 找到最后一个斜杠后的字符
    for(p = path + strlen(path); p &amp;gt;= path &amp;amp;&amp;amp; *p != &amp;#x27;&amp;#x2F;&amp;#x27;; p--)
        ;
    p++;

    &amp;#x2F;&amp;#x2F; 返回格式化后的文件名
    if(strlen(p) &amp;gt;= DIRSIZ)
        return p;
    memmove(buf, p, strlen(p));
    memset(buf + strlen(p), &amp;#x27; &amp;#x27;, DIRSIZ - strlen(p));
    return buf;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从路径末尾向前查找最后一个斜杠（&lt;code&gt;&#x2F;&lt;&#x2F;code&gt;），找到文件名起始位置。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果文件名长度超过 &lt;code&gt;DIRSIZ&lt;&#x2F;code&gt;，直接返回文件名。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;否则，将文件名复制到 &lt;code&gt;buf&lt;&#x2F;code&gt; 中，并用空格填充剩余部分。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;思路：&lt;&#x2F;p&gt;
&lt;p&gt;首先确定递归的边界条件之一：第一个参数dir_name是一个文件名。使用fmtname（需要修改一下）处理文件名之后直接比对即可，然后返回函数。find遍历目录的方式和ls基本相同。遍历目录时，遇到.和..两个文件要跳过，遇到文件时就和file_name比对，如果相同就打印这个文件的相对路径。如果遇到了目录，就递归调用search函数。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;中途思考：printf 和 write(1)的区别&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;特性&lt;&#x2F;th&gt;&lt;th&gt;&lt;code&gt;printf&lt;&#x2F;code&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;code&gt;write(1, ...)&lt;&#x2F;code&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;格式化输出&lt;&#x2F;td&gt;&lt;td&gt;原始数据输出&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;缓冲机制&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;有缓冲（行缓冲或全缓冲）&lt;&#x2F;td&gt;&lt;td&gt;无缓冲&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;易用性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;高（支持格式化字符串）&lt;&#x2F;td&gt;&lt;td&gt;低（需要手动计算长度）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;性能&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;较慢（由于缓冲和格式化开销）&lt;&#x2F;td&gt;&lt;td&gt;较快（直接系统调用）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;适用场景&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;通用输出，适合大多数情况&lt;&#x2F;td&gt;&lt;td&gt;底层操作，适合精确控制输出的场景&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;zhi-zhen-yong-fa&quot;&gt;指针用法：&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;char buf[256] = &amp;quot;hello&amp;quot;;
char *p = buf + strlen(buf); &amp;#x2F;&amp;#x2F; p 指向 buf 中字符串的末尾
strcpy(p, &amp;quot; world&amp;quot;);         &amp;#x2F;&amp;#x2F; 在 buf 中追加 &amp;quot; world&amp;quot;
printf(&amp;quot;%s\n&amp;quot;, buf);         &amp;#x2F;&amp;#x2F; 输出 &amp;quot;hello world&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;struct-dirent-yong-fa&quot;&gt;struct dirent 用法&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;dirent.h&amp;gt;

int main() {
    DIR *dir = opendir(&amp;quot;.&amp;quot;);  &amp;#x2F;&amp;#x2F; 打开当前目录
    if (dir == NULL) {
        perror(&amp;quot;opendir failed&amp;quot;);
        return 1;
    }

    struct dirent de;
    while ((de = readdir(dir)) != NULL) {  &amp;#x2F;&amp;#x2F; 读取目录项
        printf(&amp;quot;File: %s\n&amp;quot;, de-&amp;gt;d_name);  &amp;#x2F;&amp;#x2F; 打印文件名
    }

    closedir(dir);  &amp;#x2F;&amp;#x2F; 关闭目录
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;de.inum == 0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;目录项仍然存在，但 &lt;code&gt;inum&lt;&#x2F;code&gt; 为 &lt;code&gt;0&lt;&#x2F;code&gt;，表示该目录项是空闲的或无效的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;memmove(buf, p, strlen(p));&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将文件名从指针 &lt;code&gt;p&lt;&#x2F;code&gt; 指向的位置复制到缓冲区 &lt;code&gt;buf&lt;&#x2F;code&gt; 中&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;quot;kernel&amp;#x2F;types.h&amp;quot;
#include &amp;quot;kernel&amp;#x2F;stat.h&amp;quot;
#include &amp;quot;user&amp;#x2F;user.h&amp;quot;
#include &amp;quot;kernel&amp;#x2F;fs.h&amp;quot;

char*
fmtname(char *path)
{
  static char buf[DIRSIZ+1];
  char *p;

  &amp;#x2F;&amp;#x2F; Find first character after last slash.
  for(p=path+strlen(path); p &amp;gt;= path &amp;amp;&amp;amp; *p != &amp;#x27;&amp;#x2F;&amp;#x27;; p--)
    ;
  p++;

  &amp;#x2F;&amp;#x2F; Return blank-padded name.
  if(strlen(p) &amp;gt;= DIRSIZ)
    return p;
  memmove(buf, p, strlen(p));
  memset(buf+strlen(p), &amp;#x27; &amp;#x27;, DIRSIZ-strlen(p));
  return buf;
}

void
find(char* dir_name, char* file_name)
{
char buf[256];
int fd;
struct stat st;
struct dirent de;


if(fd = open(dir_name,0))
{
    fprintf(2, &amp;quot;find cannot open dir %s\n&amp;quot;,dir_name);
    return;
}
if(fstat(fd,&amp;amp;st) &amp;lt; 0)
{
    fprintf(2,&amp;quot;find: cannot stat dir %s\n&amp;quot;,dir_name);
}
&amp;#x2F;&amp;#x2F;如果是文件则直接输出
if(st.type == T_FILE)
{
if(!strcmp(fmtname(dir_name),file_name))
{
    printf(&amp;quot;%s\n&amp;quot;,dir_name);
}
return;
}

&amp;#x2F;&amp;#x2F;如果是目录应该遍历目录下的文件
if(st.type = T_DIR)
{
if(strlen(dir_name) + 1 + DIRSIZ + 1 &amp;gt; sizeof(buf))
{
    printf(&amp;quot;find: path too long\n&amp;quot;);
    return;
}
}
    strcpy(buf, dir_name);
    p = buf + strlen(buf);&amp;#x2F;&amp;#x2F;定位指针
    *p++ = &amp;#x27;&amp;#x2F;&amp;#x27;;
struct stat st_temp;
while(read(fd,.&amp;amp;de,sizeof(de)) == sizeof(de))
{

if(de.inum == 0)
{
    continue;
}
    memmove(p,de.name,DIRSIZE);
    p[DIRSIZ] = 0;
if(stat(buf,&amp;amp;st_temp) &amp;lt; 0)
{
continue;
}

if(st_tmp.type==T_FILE)&amp;#x2F;&amp;#x2F;如果是普通文件
    {
        if(!strcmp(de.name,file_name))&amp;#x2F;&amp;#x2F;找到文件
        {
        printf(&amp;quot;%s\n&amp;quot;,buf);&amp;#x2F;&amp;#x2F;打印文件的相对路径
        }
    }
if(st_tmp.type==T_DIR)&amp;#x2F;&amp;#x2F;如果是目录
    {
        &amp;#x2F;&amp;#x2F;递归搜索，使用BFS遍历directory tree
        &amp;#x2F;&amp;#x2F;禁止遍历. .. 这两个目录
        if((!strcmp(de.name,this_dir))||(!strcmp(de.name,parent_dir)))
        continue;
        find(buf,file_name);&amp;#x2F;&amp;#x2F;递归搜索
    }
}
return;
}

int
main(int argc, char* argv[]){

if(argc &amp;lt; 3 ) {
    fprintf(2,&amp;quot;too few arguments\n&amp;quot;);
    exit(1);
}
find(argv[1],argv[2]);
exit(0);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一次完成代码： 有很多问题，代码格式还需要修改！&lt;&#x2F;p&gt;
&lt;p&gt;需要修改很多地方&lt;&#x2F;p&gt;
&lt;p&gt;关键点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while(read(...))&lt;&#x2F;code&gt; 循环遍历目录项，每次 &lt;code&gt;read&lt;&#x2F;code&gt; 取出一个 &lt;code&gt;de&lt;&#x2F;code&gt; 结构体，赋值给 &lt;code&gt;de.name&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;!strcmp(de.name, file_name)&lt;&#x2F;code&gt; 持续比较 &lt;code&gt;de.name&lt;&#x2F;code&gt; 和 &lt;code&gt;file_name&lt;&#x2F;code&gt;，匹配成功时打印路径。&lt;&#x2F;li&gt;
&lt;li&gt;递归调用 &lt;code&gt;find(buf, file_name)&lt;&#x2F;code&gt;，在子目录里重复上述过程。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;正确代码已推送至仓库：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Whuichenggong&#x2F;6.s081&quot;&gt;我的6.s081仓库&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zong-jie-find-cxi-tong-diao-yong-han-shu&quot;&gt;总结find.c系统调用函数：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;find.c&lt;&#x2F;code&gt; 中使用的操作系统调用函数及其作用如下：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;&#x2F;th&gt;&lt;th&gt;作用&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;open&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;打开目录或文件。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;close&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;关闭文件描述符。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fstat&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;获取文件或目录的状态信息。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;read&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;读取目录项。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;stat&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;获取文件或目录的状态信息。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;strcmp&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;比较文件名。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;strcpy&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;复制路径字符串。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;memmove&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;复制文件名到缓冲区。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;memset&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;填充缓冲区。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;printf&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;输出文件路径或信息。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fprintf&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;输出错误信息到标准错误流。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;xargs-c&quot;&gt;xargs.c&lt;&#x2F;h3&gt;
&lt;p&gt;如何将指令的结果 作为 参数传给xargs.c&lt;&#x2F;p&gt;
&lt;p&gt;指针含义&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;char *args[MAXARG]; &amp;#x2F;&amp;#x2F;  每个元素是一个 char*
args[argc - 1] = p; &amp;#x2F;&amp;#x2F;将 p 指向的字符串存入args数组的第 argc - 1个位置
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xargs&lt;&#x2F;code&gt; 的作用是将标准输入的内容作为参数，拼接到指定命令的后面。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;过程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始时，&lt;code&gt;p&lt;&#x2F;code&gt; 指向 &lt;code&gt;buf&lt;&#x2F;code&gt; 的开头，内容是 &lt;code&gt;hello too\n&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;跳过空白字符（如果有），这里没有前导空白。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;将 &lt;code&gt;hello&lt;&#x2F;code&gt; 作为一个参数，存入 &lt;code&gt;args&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args = [&quot;echo&quot;, &quot;bye&quot;, &quot;hello&quot;]&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;继续解析，将 &lt;code&gt;too&lt;&#x2F;code&gt; 作为一个参数，存入 &lt;code&gt;args&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args = [&quot;echo&quot;, &quot;bye&quot;, &quot;hello&quot;, &quot;too&quot;]&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;遇到换行符 &lt;code&gt;\n&lt;&#x2F;code&gt;，解析结束。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在这个例子中：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;echo hello too&lt;&#x2F;code&gt; 输出 &lt;code&gt;hello too&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xargs&lt;&#x2F;code&gt; 读取 &lt;code&gt;hello too&lt;&#x2F;code&gt;，将其解析为参数 &lt;code&gt;hello&lt;&#x2F;code&gt; 和 &lt;code&gt;too&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;将 &lt;code&gt;hello&lt;&#x2F;code&gt; 和 &lt;code&gt;too&lt;&#x2F;code&gt; 拼接到 &lt;code&gt;echo bye&lt;&#x2F;code&gt; 后面，形成 &lt;code&gt;echo bye hello too&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最终输出 &lt;code&gt;bye hello too&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;’\0‘ 作为字符串的结束&lt;&#x2F;p&gt;
&lt;p&gt;关键代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;while ((n = read(0, buf, sizeof(buf))) {
        if (n &amp;lt; 0) {
            fprintf(2, &amp;quot;xargs: read error\n&amp;quot;);
            exit(1);
        }

        &amp;#x2F;&amp;#x2F; 将输入数据解析为参数
        char *p = buf;
        while (*p != &amp;#x27;\0&amp;#x27;) {
            &amp;#x2F;&amp;#x2F; 跳过空白字符
            while (*p == &amp;#x27; &amp;#x27; || *p == &amp;#x27;\n&amp;#x27;) {
                *p++ = &amp;#x27;\0&amp;#x27;;
            }

            &amp;#x2F;&amp;#x2F; 如果遇到非空白字符，将其作为参数
            if (*p != &amp;#x27;\0&amp;#x27;) {
                args[argc - 1] = p;
                argc++;
                while (*p != &amp;#x27;\0&amp;#x27; &amp;amp;&amp;amp; *p != &amp;#x27; &amp;#x27; &amp;amp;&amp;amp; *p != &amp;#x27;\n&amp;#x27;) {
                    p++;
                }
            }
        }

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今天执行程序测试的时候出现了问题：&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;make: *** No rule to make target &amp;#x27;user&amp;#x2F;_xargs\&amp;#x27;, needed by &amp;#x27;fs.img&amp;#x27;. Stop.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就是xargs配置出现了问题 问题应该是在Makfile中&lt;&#x2F;p&gt;
&lt;p&gt;emmm 缩进使用的空格造成了问题！ 直接使用tab就好了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt; ((n = read(0, buf, sizeof(buf))) &amp;gt; 0)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运算优先级&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;1-di-yi-ge-jin-cheng&quot;&gt;1. 第一个进程：&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;binlovetech&#x2F;p&#x2F;17571929.html&quot;&gt;很好的页表讲解&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;![[页表映射.png]]&lt;&#x2F;p&gt;
&lt;p&gt;xv6是如何开始运行的：&lt;&#x2F;p&gt;
&lt;p&gt;进程，它让一个程序可以假设它独占一台机器。进程向程序提供“看上去”私有的，其他进程无法读写的内存系统（或地址空间），以及一颗“看上去”仅执行该程序的CPU&lt;&#x2F;p&gt;
&lt;p&gt;xv6 使用页表 为每个进程提供其独有的地址空间。页表将_虚拟地址_&lt;em&gt;(x86 指令所使用的地址&lt;&#x2F;em&gt;) 翻译 为_物理地址_(&lt;em&gt;处理器芯片向主存发送的地址&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;shu-ju-jie-gou-fen-ye-biao&quot;&gt;数据结构： 分页表&lt;&#x2F;h3&gt;
&lt;p&gt;用于计算机 操作系统中的 &lt;em&gt;虚拟内存 系统&lt;&#x2F;em&gt;，其&lt;em&gt;存储了虚拟地址到物理地址间的映射&lt;&#x2F;em&gt;。虚拟地址在访问进程中是唯一的，而物理地址在硬件（比如内存)中是唯一的&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;操作系统中使用虚拟内存， 进程会认为 &lt;em&gt;自己使用了一块大的连续内存&lt;&#x2F;em&gt;，但是事实 每个进程的&lt;em&gt;内存散布在 物理内存 的不同区域&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进程和页表都存储在内存中，查询进程数据时，需要访问两次内存， 放入寄存器中加快查询速度&lt;&#x2F;p&gt;
&lt;p&gt;操作系统负责把程序生成的虚拟地址，映射到实际存储的物理内存上  存储虚拟地址到物理地址的映射&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;3963fdd5-c8be-4808-b291-bbb7af5afb9e&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;xv6 为每个进程维护了不同的页表&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;41bf1ee9-618f-491b-beaa-afcdbbc1de90&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;线程： 每个进程都有一个运行线程 来执行进程的指令 &lt;em&gt;线程可以被暂时挂起，稍后再恢复运行&lt;&#x2F;em&gt;   系统在&lt;em&gt;进程之间切换&lt;&#x2F;em&gt; 实际上就是&lt;em&gt;挂起&lt;&#x2F;em&gt;当前运行的&lt;em&gt;线程&lt;&#x2F;em&gt;，&lt;em&gt;恢复&lt;&#x2F;em&gt;另一个进程的&lt;em&gt;线程&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;进程的组成： 每个进程都有 &lt;em&gt;用户栈&lt;&#x2F;em&gt;  和  &lt;em&gt;内核栈&lt;&#x2F;em&gt; ： 进程运行&lt;em&gt;用户指令&lt;&#x2F;em&gt;时，只有其&lt;em&gt;用户栈被使用&lt;&#x2F;em&gt;，其内核栈则是空的，当进程（通过&lt;em&gt;系统调用或中断&lt;&#x2F;em&gt;）进入&lt;em&gt;内核&lt;&#x2F;em&gt;时，内核代码就在进程的&lt;em&gt;内核栈&lt;&#x2F;em&gt;中执行，进程处于内核中时，其&lt;em&gt;用户栈仍然保存着数据&lt;&#x2F;em&gt;，只是&lt;em&gt;暂时处于不活跃状态&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;线程&lt;em&gt;交替地使用&lt;&#x2F;em&gt;着用户栈和内核栈 内核栈是用户代码无法使用的，这样即使一个进程破坏了自己的用户栈，&lt;em&gt;内核也能保持运行&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;内核栈是用户代码无法使用的，这样即使一个进程破坏了自己的用户栈，内核也能保持运行&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;进程使用系统调用时，处理器转入内核栈中，提升硬件的特权级，然后运行系统调用对应的内核代码， 当系统调用完成时，又从内核空间回到用户空间：降低硬件特权级，转入用户栈 线程可以在内核中“阻塞”，等待 I&#x2F;O, 在 I&#x2F;O 结束后再恢复运行&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;p-&amp;gt;state&lt;&#x2F;code&gt; 指示了进程的状态：新建、准备运行、运行、等待 I&#x2F;O 或退出状态中&lt;&#x2F;p&gt;
&lt;p&gt;PC 开机时：  从磁盘中载入 &lt;em&gt;boot loader&lt;&#x2F;em&gt; 到内存并运行 &lt;em&gt;boot loader&lt;&#x2F;em&gt; 把 xv6 内核从磁盘中载入并从 &lt;code&gt;entry&lt;&#x2F;code&gt;（1040）开始运行&lt;&#x2F;p&gt;
&lt;p&gt;分页硬件在此时还没有开始工作；所以这时的虚拟地址是直接映射到物理地址上的&lt;&#x2F;p&gt;
&lt;p&gt;boot loader 把 xv6 内核装载到物理地址 0x100000 处。之所以没有装载到内核指令和内核数据应该出现的 0x80100000，是因为小型机器上很可能没有这么大的物理内存。而之所以在 0x100000 而不是 0x0 则是因为地址 0xa0000 到 0x100000 是属于 I&#x2F;O 设备的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;88b08622-7de2-4d0b-90d2-7ba6c921fc46&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为了让内核的剩余部分能够运行，&lt;code&gt;entry&lt;&#x2F;code&gt; 的代码设置了页表 将 0x80000000开始的虚拟地址映射到物理地址 0x0 处 页表经常会这样把两段不同的虚拟内存映射到相同的一段物理内存&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lab3&quot;&gt;lab3 ：&lt;&#x2F;h2&gt;
&lt;p&gt;多路复用 隔离&lt;&#x2F;p&gt;
&lt;p&gt;将一个cpu抽象为一个进程 4核心就是同时或并行四个进程每个核心上都有一个进程 不同的进程之间进行时间复用&lt;&#x2F;p&gt;
&lt;p&gt;exec： 抽象了内存 内存映像
files： 抽象了磁盘块&lt;br &#x2F;&gt;
proc.c 有关多路复用
Strong isolation between apps + os&lt;&#x2F;p&gt;
&lt;p&gt;User&#x2F;kernel modev&lt;&#x2F;p&gt;
&lt;p&gt;cpu vitual memory：&lt;&#x2F;p&gt;
&lt;p&gt;page table  将虚拟地址 映射到 物理地址&lt;&#x2F;p&gt;
&lt;p&gt;查看 kernel&#x2F;kernel.asm&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gdbdiao-shi&quot;&gt;*gdb调试：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;8d087a24-c559-4809-9e9d-3a499cd1a26a&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;gdb-multiarch&lt;&#x2F;code&gt; 指令开启gdb 并且使用 &lt;code&gt;target remote :25000&lt;&#x2F;code&gt; 连接到qemu&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;53393104-daef-49a8-a763-a9be02dff4f7&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;视频中老师使用的linux版本并不是ubuntu 所以指令在ubuntu中并不适用，需要更改！！&lt;&#x2F;p&gt;
&lt;p&gt;首先要手动读取内核：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;file kernel&#x2F;kernel&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;之后就可以看到详细的输出了 但是没有视频中的纤细输出&lt;&#x2F;p&gt;
&lt;p&gt;b ~~  给某个位置打断点&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;b _entry&lt;&#x2F;code&gt; &lt;code&gt;b main&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;c&lt;&#x2F;code&gt;  (Continue) - 继续执行直到下一个断点&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;si&lt;&#x2F;code&gt;  (Step Instruction) - 单步执行一条汇编指令&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;n&lt;&#x2F;code&gt; (Next) - 单步执行一行源代码&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;6aa9c086-a65d-49bb-95e1-2cb0216dcc13&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;layout asm&lt;&#x2F;code&gt;  :&lt;&#x2F;p&gt;
&lt;p&gt;纯汇编视图&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;只显示&lt;strong&gt;汇编指令&lt;&#x2F;strong&gt;，适用于低级调试（如 OS 内核、Bootloader）。&lt;&#x2F;li&gt;
&lt;li&gt;适合用 &lt;code&gt;si&lt;&#x2F;code&gt;（单步执行指令）进行逐条汇编指令调试。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;**&lt;code&gt;layout split&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;源代码 + 汇编混合视图&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;上半部分&lt;&#x2F;strong&gt;：显示源码（C 代码）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;下半部分&lt;&#x2F;strong&gt;：显示对应的&lt;strong&gt;汇编指令&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;适用于调试 C 语言时，同时观察 C 代码和编译后的汇编代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ctrl + x a 退出&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lab-2-system-calls&quot;&gt;lab 2： System-calls&lt;&#x2F;h2&gt;
&lt;p&gt;测评脚本修改为：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo python3 grade-lab-syscall trace
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;system-call-tracing&quot;&gt;System call tracing&lt;&#x2F;h4&gt;
&lt;p&gt;添加一个系统调用跟踪功能，该功能可能会在调试后续实验时为您提供帮助&lt;&#x2F;p&gt;
&lt;h2 id=&quot;di-er-zhang-ye-biao&quot;&gt;*第二章：页表&lt;&#x2F;h2&gt;
&lt;p&gt;页表使得 xv6 能够让不同进程各自的地址空间映射到相同的物理内存上，还能够为不同进程的内存提供保护&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;cha-ru-xue-xi&quot;&gt;插入学习：&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;suo&quot;&gt;锁&lt;&#x2F;h4&gt;
&lt;p&gt;xv6 运行在多处理器上，即计算机上有多个单独执行代码的 CPU。这些 CPU 操作同一片地址空间并分享其中的数据结构；xv6 必须建立一种合作机制防止它们互相干扰。即使是在单个处理器上，xv6 也必须使用某些机制来&lt;em&gt;防止中断处理程序与非中断代码之间互相干扰&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;锁提供了互斥功能，保证某个时间点只有一个 CPU 能持有锁&lt;&#x2F;p&gt;
&lt;h4 id=&quot;guan-jian&quot;&gt;关键：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;你一定要问自己另一个处理器的存在是否会让这行代码无法达到期望的运行结果（因为另一个处理器也可能正在运行该行代码，或者另一行修改这个共享变量的代码），还要考虑如果这里执行一个中断处理程序，又会发生什么情况。&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;一行 C 代码可能由多条机器指令组成，而另一个处理器或者中断可能在这些指令中间影响之。你不能假设这些代码是顺序执行的，也不能假设一个 C 指令是以原子操作执行的。并发使得考虑代码的正确性变得困难。&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jing-zheng-tiao-jian&quot;&gt;竞争条件：&lt;&#x2F;h4&gt;
&lt;p&gt;为什么我们需要锁？？&lt;&#x2F;p&gt;
&lt;p&gt;一段链表代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;struct list{
    int data;
    struct list *next;
};

struct list *list = 0;

void
insert(int data)
{
    struct list *l;
    l = malloc(sizeof *l);
    l-&amp;gt;data = data;
    l-&amp;gt;next = list;
    list = l;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;即使可以证明其正确性，实际上这种实现也是错误的，至少不能在多处理器上运行&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt; &lt;strong&gt;全局变量 &lt;code&gt;list&lt;&#x2F;code&gt; 的潜在问题&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;这意味着所有对链表的操作都会共享同一个 &lt;code&gt;list&lt;&#x2F;code&gt;。在多线程环境中，这可能会导致竞争条件（race condition），因为多个线程可能同时修改 &lt;code&gt;list&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wo-de-xiang-fa&quot;&gt;我的想法：&lt;&#x2F;h4&gt;
&lt;p&gt;如何模拟多线程 使这段原本正常运行的代码出现问题？ 打开两个编译器同时执行这段代码可以吗？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jie-da-3&quot;&gt;解答：&lt;&#x2F;h4&gt;
&lt;p&gt;打开两个编译器同时执行这段代码并不能模拟多线程环境，因为每个编译器运行的是独立的进程，它们的内存空间是隔离的，不会共享全局变量 &lt;code&gt;list&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;要模拟多线程环境，你需要在同一个进程内创建多个线程，并让这些线程同时操作共享的全局变量 &lt;code&gt;list&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;竞争问题在于它们的结果由 CPU 执行时间以及其内存操作的先后决定的&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;使用c语言模拟多线程编程导致的资源竞争：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;windows.h&amp;gt;

&amp;#x2F;&amp;#x2F; 链表结构体
struct list {
    int data;
    struct list* next;
};

struct list* list = NULL;
&amp;#x2F;&amp;#x2F;CRITICAL_SECTION lock;  &amp;#x2F;&amp;#x2F; 互斥锁

void insert(int data) {
    struct list* l = malloc(sizeof * l);
    if (l == NULL) {
        fprintf(stderr, &amp;quot;Memory allocation failed\n&amp;quot;);
        exit(EXIT_FAILURE);
    }
    l-&amp;gt;data = data;

    &amp;#x2F;&amp;#x2F; 线程安全的修改
    &amp;#x2F;&amp;#x2F;EnterCriticalSection(&amp;amp;lock);
    l-&amp;gt;next = list;
    list = l;
    &amp;#x2F;&amp;#x2F;LeaveCriticalSection(&amp;amp;lock);
}

void print_list() {
    struct list* current = list;
    while (current != NULL) {
        printf(&amp;quot;%d -&amp;gt; &amp;quot;, current-&amp;gt;data);
        current = current-&amp;gt;next;
    }
    printf(&amp;quot;NULL\n&amp;quot;);
}

DWORD WINAPI thread_func(LPVOID arg) {
    for (int i = 0; i &amp;lt; 10; i++) {
        insert(i);
    }
    return 0;
}

int main() {
    insert(10);
    insert(20);
    insert(30);
    insert(40);
   &amp;#x2F;&amp;#x2F; InitializeCriticalSection(&amp;amp;lock);  &amp;#x2F;&amp;#x2F; 初始化互斥锁

    HANDLE thread1, thread2;

    &amp;#x2F;&amp;#x2F; 创建两个线程
    thread1 = CreateThread(NULL, 0, thread_func, NULL, 0, NULL);
    thread2 = CreateThread(NULL, 0, thread_func, NULL, 0, NULL);

    &amp;#x2F;&amp;#x2F; 等待线程结束
   &amp;#x2F;&amp;#x2F; WaitForSingleObject(thread1, INFINITE);
    &amp;#x2F;&amp;#x2F;WaitForSingleObject(thread2, INFINITE);

    print_list();

    &amp;#x2F;&amp;#x2F;DeleteCriticalSection(&amp;amp;lock);  &amp;#x2F;&amp;#x2F; 释放互斥锁
    return 0;
}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;jin-cheng-he-xian-cheng-de-guan-xi&quot;&gt;&lt;strong&gt;进程和线程的关系&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进程&lt;&#x2F;strong&gt;：进程是操作系统分配资源的基本单位。每个进程都有独立的内存空间、文件描述符、环境变量等资源。进程之间是相互隔离的，一个进程崩溃通常不会影响其他进程。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;线程&lt;&#x2F;strong&gt;：线程是进程内的执行单元，是&lt;em&gt;操作系统调度的基本单位&lt;&#x2F;em&gt;。一个进程可以包含多个线程，这些线程共享进程的内存空间和资源（如堆、全局变量、文件描述符等），但每个线程有自己的栈和寄存器状态。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-2-2&quot;&gt;问题2：&lt;&#x2F;h4&gt;
&lt;p&gt;一个进程会没有线程吗？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-2-1&quot;&gt;回答2：&lt;&#x2F;h4&gt;
&lt;p&gt;一个进程至少有一个线程，称为主线程（main thread）。当你运行一个普通的 C 程序时，&lt;code&gt;main&lt;&#x2F;code&gt; 函数就是在主线程中执行的。这种进程是单线程的。&lt;&#x2F;p&gt;
&lt;p&gt;通过调用线程库（如 &lt;code&gt;pthread&lt;&#x2F;code&gt;），可以在一个进程中创建多个线程，这些线程并发执行。&lt;&#x2F;p&gt;
&lt;p&gt;没有线程的进程是不存在的。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;void
acquire(struct spinlock *lk)
{
    for(;;) {
        if(!lk-&amp;gt;locked) {
            lk-&amp;gt;locked = 1;
            break;
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码在现代处理器上并不能保证互斥   代码会导致 两个不同的 CPU 持有锁，违反了互斥&lt;&#x2F;p&gt;
&lt;p&gt;若要保证代码的正确，就必须让操作是&lt;em&gt;原子操作&lt;&#x2F;em&gt;的 意味着在执行过程中不会被其他线程或 CPU 核心打断。&lt;&#x2F;p&gt;
&lt;p&gt;特殊指令 &lt;code&gt;xchg&lt;&#x2F;code&gt;   &lt;code&gt;xchg(&amp;amp;lk-&amp;gt;locked, 1);&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;交换了内存中的一个字和一个寄存器的值&lt;&#x2F;p&gt;
&lt;p&gt;交换了什么？&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存中的值&lt;&#x2F;strong&gt;：&lt;code&gt;lk-&amp;gt;locked&lt;&#x2F;code&gt; 的当前值（可能是 &lt;code&gt;0&lt;&#x2F;code&gt; 或 &lt;code&gt;1&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;寄存器中的值&lt;&#x2F;strong&gt;：&lt;code&gt;1&lt;&#x2F;code&gt;（表示尝试获取锁）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-3-1&quot;&gt;问题3：&lt;&#x2F;h4&gt;
&lt;p&gt;如果两个线程同时运行到xarg这个语句不也还是会造成冲突吗&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-3-1&quot;&gt;回答3：&lt;&#x2F;h4&gt;
&lt;p&gt;关键在于 &lt;strong&gt;&lt;code&gt;xchg&lt;&#x2F;code&gt; 指令的原子性&lt;&#x2F;strong&gt;。即使两个线程同时运行到 &lt;code&gt;xchg&lt;&#x2F;code&gt; 语句，也不会造成冲突，因为 &lt;code&gt;xchg&lt;&#x2F;code&gt; 是硬件级别的原子操作。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 会确保 &lt;code&gt;xchg&lt;&#x2F;code&gt; 指令的执行是原子的。即使多个线程同时执行 &lt;code&gt;xchg&lt;&#x2F;code&gt;，硬件也会通过锁总线（bus locking）或缓存一致性协议（cache coherence）来保证只有一个线程能够成功执行 &lt;code&gt;xchg&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;syscall-c&quot;&gt;syscall.c&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;
void
syscall(void)
{
  int num;
  struct proc *p = myproc();

  num = p-&amp;gt;trapframe-&amp;gt;a7;
  if(num &amp;gt; 0 &amp;amp;&amp;amp; num &amp;lt; NELEM(syscalls) &amp;amp;&amp;amp; syscalls[num]) {
    &amp;#x2F;&amp;#x2F; Use num to lookup the system call function for num, call it,
    &amp;#x2F;&amp;#x2F; and store its return value in p-&amp;gt;trapframe-&amp;gt;a0
    p-&amp;gt;trapframe-&amp;gt;a0 = syscalls[num]();
  } else {
    printf(&amp;quot;%d %s: unknown sys call %d\n&amp;quot;,
            p-&amp;gt;pid, p-&amp;gt;name, num);
    p-&amp;gt;trapframe-&amp;gt;a0 = -1;
  }
}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;解读&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;myproc()&lt;&#x2F;code&gt; 是 xv6 中的一个函数，用于获取当前正在运行的进程的 &lt;code&gt;proc&lt;&#x2F;code&gt; 结构体指针。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;系统调用号是通过寄存器 &lt;code&gt;a7&lt;&#x2F;code&gt; 传递的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;寄存器 RS触发器&lt;&#x2F;em&gt; ：&lt;&#x2F;p&gt;
&lt;p&gt;是cpu用来&lt;em&gt;暂存指令，数据，地址的电脑存储器&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;f9fa6347-2430-4f65-878a-9dbbe4227cec&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;作用：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从用户进程的陷阱帧中获取系统调用号。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;根据系统调用号找到对应的内核函数并执行。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;将系统调用的结果返回给用户进程。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果系统调用号无效，则返回错误信息。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;***DMA *&lt;em&gt;插入知识&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yu-jian-cuo-wu&quot;&gt;遇见错误：&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code&gt;kernel&amp;#x2F;syscall.c:129:15: error: ‘sys_close’ undeclared here (not in a function); did you mean ‘sys_closei’?
  129 | [SYS_close]   sys_close,
      |               ^~~~~~~~~
      |               sys_closei
make: *** [&amp;lt;builtin&amp;gt;: kernel&amp;#x2F;syscall.o] Error 1

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;手贱 修改了 extern uint64 sys_close(void); 为 extern uint64 sys_closei(void);&lt;&#x2F;p&gt;
&lt;p&gt;系统调用表&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;static uint64 (*syscalls[])(void) = {

[SYS_fork]    sys_fork,

[SYS_exit]    sys_exit,

[SYS_wait]    sys_wait,

[SYS_pipe]    sys_pipe,

[SYS_read]    sys_read,

[SYS_kill]    sys_kill,

[SYS_exec]    sys_exec,

[SYS_fstat]   sys_fstat,

[SYS_chdir]   sys_chdir,

[SYS_dup]     sys_dup,

[SYS_getpid]  sys_getpid,

[SYS_sbrk]    sys_sbrk,

[SYS_sleep]   sys_sleep,

[SYS_uptime]  sys_uptime,

[SYS_open]    sys_open,

[SYS_write]   sys_write,

[SYS_mknod]   sys_mknod,

[SYS_unlink]  sys_unlink,

[SYS_link]    sys_link,

[SYS_mkdir]   sys_mkdir,

[SYS_close]   sys_close,

};
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;wen-ti-4&quot;&gt;问题：&lt;&#x2F;h4&gt;
&lt;p&gt;为什么在 char* syscall_name[]数组中如果顺序错误，会导致 在调用&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;trace 32 grep hello README&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;产生的命令也会不一样（4: syscall read -&amp;gt; 1023） （3: syscall pipe -&amp;gt; 1023）&lt;&#x2F;p&gt;
&lt;p&gt;关键：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;syscall.c&lt;&#x2F;code&gt;  &lt;code&gt;proc.c&lt;&#x2F;code&gt; &lt;code&gt;sysproc.c&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;在做实验的时候 因为镜像不是教程使用的镜像 所以导致很多环境缺失，我现在必须切换另一个仓库&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;for branch in $(git branch -r | grep -v HEAD); do
    git branch --track ${branch#origin&amp;#x2F;} $branch
done
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;拉取另一个仓库的所有分支&lt;&#x2F;p&gt;
&lt;p&gt;终于配好了环境！！！&lt;&#x2F;p&gt;
&lt;p&gt;先接着做，回头再补上之前的代码&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sys-sysinfo-c&quot;&gt;sys_sysinfo.c&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  

uint64 acquire_freemem(){

  struct run *r;

  uint64 cnt = 0;

  

  acquire(&amp;amp;kmem.lock);

  r = kmem.freelist;

  while(r) {

    r = r-&amp;gt;next;

    cnt++;

  }

  if(r)

    kmem.freelist = r-&amp;gt;next;

  release(&amp;amp;kmem.lock);

  

  return cnt * PGSIZE;

}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt; if (argaddr(0,&amp;amp;addr)&amp;lt;0) {

    return -1

  }

  if (copyout(p-&amp;gt;pagetable,addr,(char*)&amp;amp;info,sizeof(info))&amp;lt;0)

    return -1;

}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;从系统调用的参数中获取用户空间的地址。&lt;&#x2F;p&gt;
&lt;p&gt;将内核中的 &lt;code&gt;info&lt;&#x2F;code&gt; 结构体数据复制到用户空间的地址 &lt;code&gt;addr&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p-&amp;gt;pagetable&lt;&#x2F;code&gt;：当前进程的页表，用于将内核虚拟地址映射到用户虚拟地址。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;(char *)&amp;amp;info&lt;&#x2F;code&gt;：内核中 &lt;code&gt;info&lt;&#x2F;code&gt; 结构体的起始地址，强制转换为 &lt;code&gt;char *&lt;&#x2F;code&gt; 以便逐字节复制&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wen-ti-4-1&quot;&gt;问题4：&lt;&#x2F;h4&gt;
&lt;p&gt;为什么会考虑使用链表来管理空闲内存&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-4&quot;&gt;回答4：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;动态内存管理的需求&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;链表在分配和释放操作上的时间复杂度为 O(1），非常高效。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;高效的内存分配和释放&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;：每个空闲页只需要一个指针&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;适应碎片化内存&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;：轻松管理不连续的空闲页&lt;&#x2F;p&gt;
&lt;h4 id=&quot;kalloc-c-de-he-xin-gong-neng&quot;&gt;&lt;code&gt;kalloc.c&lt;&#x2F;code&gt; 的核心功能&lt;&#x2F;h4&gt;
&lt;p&gt;使用一个链表来管理空闲的物理内存页。每个空闲页的开头存储一个指向下一个空闲页的指针。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;一个页表在物理内存中像一棵两层的树。树的根是一个 4096 字节的_页目录_，其中包含了 1024 个类似 PTE 的条目，每个条目是指向一个_页表页_的引用&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pte-ye-ye-biao&quot;&gt;&lt;strong&gt;PTE &amp;amp; 页 &amp;amp; 页表&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;PTE 结构通常包含以下关键字段：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;物理页帧号（PFN，Page Frame Number）&lt;&#x2F;strong&gt;：映射的物理页地址。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存在位（Present Bit）&lt;&#x2F;strong&gt;：指示该页是否在内存中（1 代表在内存，0 代表不在，需要从磁盘调入）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;读&#x2F;写权限（R&#x2F;W Bit）&lt;&#x2F;strong&gt;：控制该页是否可写（1 可写，0 只读）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户&#x2F;内核权限（U&#x2F;S Bit）&lt;&#x2F;strong&gt;：决定该页是用户态（1）还是内核态（0）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;访问位（Accessed Bit）&lt;&#x2F;strong&gt;：指示该页最近是否被访问过（用于页面置换策略）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;脏位（Dirty Bit）&lt;&#x2F;strong&gt;：如果该页被修改过，操作系统可能需要回写到磁盘。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;每个字节的物理内存都有一个地址     &lt;em&gt;虚拟地址则是程序所使用的&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个进程都有自己的页表 xv6 会在&lt;strong&gt;进程切换时通知分页硬件切换页表&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;分页机制&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;采用 &lt;strong&gt;两级页表&lt;&#x2F;strong&gt; 结构，即 &lt;strong&gt;页表目录（Page Directory）+ 页表（Page Table）&lt;&#x2F;strong&gt;，用于管理 &lt;strong&gt;虚拟地址到物理地址的映射&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;页表目录是一个“目录”，指向多个页表。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;页表是具体的“映射表”，存储 PTE（页表项），负责映射虚拟地址到物理地址。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PTE 是最终的映射单元，包含物理地址和权限控制信息。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-5&quot;&gt;问题5：&lt;&#x2F;h4&gt;
&lt;p&gt;每个进程有独立的页表是什么意思？ 如果有两个进程 并且两个进程的页表分别都映射到了相同的物理地址怎么办？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-5&quot;&gt;回答5：&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&amp;#x2F;&amp;#x2F; 进程A的页表（部分）
虚拟页0x1000 → 物理页帧0x2000 (存变量X)
虚拟页0x2000 → 物理页帧0x3000 (存代码段)

&amp;#x2F;&amp;#x2F; 进程B的页表（部分） 
虚拟页0x1000 → 物理页帧0x4000 (存变量Y) 
虚拟页0x2000 → 物理页帧0x3000 (共享库代码)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;虽然两个进程都有虚拟地址 &lt;code&gt;0x1000&lt;&#x2F;code&gt;，但实际指向不同物理内存&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;两者都访问 &lt;code&gt;0x2000&lt;&#x2F;code&gt; 时，却指向同一物理页帧（共享库）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;共享代码库（故意共享）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;&#x2F;strong&gt;：多个PTE指向同一物理页，节省内存&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关键&lt;&#x2F;strong&gt;：页表项标记为&lt;strong&gt;只读&lt;&#x2F;strong&gt;，防止互相干扰&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;解析：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;e6c58e1d-b24b-4713-8019-50ec8a481734&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;1. 层级包含关系图示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;复制&lt;&#x2F;p&gt;
&lt;p&gt;页表 (Page Table)
│
├── 页表项 (PTE 1) → 映射到物理页帧 X
├── 页表项 (PTE 2) → 映射到物理页帧 Y
├── ...
└── 页表项 (PTE N) → 标记为无效（缺页）&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每个PTE对应一个虚拟页&lt;&#x2F;strong&gt;，记录该页的物理位置和属性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-6&quot;&gt;问题6：&lt;&#x2F;h4&gt;
&lt;p&gt;教授提出问题：为什么ppn存在于page directory中？目的是什么&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-6&quot;&gt;回答6：&lt;&#x2F;h4&gt;
&lt;h3 id=&quot;ye-mu-lu-de-ben-zhi-yu-zuo-yong&quot;&gt; &lt;strong&gt;页目录的本质与作用&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;页目录是多级页表的第一级（如x86的PML4或ARM的L1页表），其核心功能是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定位下级页表&lt;&#x2F;strong&gt;：存储下一级页表（Page Table）的&lt;strong&gt;物理页帧号（PPN）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制访问权限&lt;&#x2F;strong&gt;：通过标志位管理整个下级页表的全局权限（如是否可写、用户态可否访问）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;（1）多级页表的物理地址连续性要求&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关键约束&lt;&#x2F;strong&gt;：CPU的MMU硬件在查表时，必须直接访问&lt;strong&gt;物理内存&lt;&#x2F;strong&gt;（因为此时尚未完成虚拟→物理地址转换）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;&#x2F;strong&gt;：页目录项中存储下级页表的&lt;strong&gt;物理页帧号（PPN）&lt;&#x2F;strong&gt;，使MMU能直接定位下级页表的物理位置。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;satpzuo-yong&quot;&gt;satp作用：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;satp&lt;&#x2F;code&gt;（Supervisor Address Translation and Protection，监管者地址转换和保护）是 RISC-V 架构中控制 &lt;strong&gt;虚拟内存系统&lt;&#x2F;strong&gt; 的核心寄存器，主要功能包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用&#x2F;禁用分页机制&lt;&#x2F;strong&gt;：决定是否开启虚拟地址到物理地址的转换。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置页表基地址&lt;&#x2F;strong&gt;：告诉 CPU 当前进程的页表在物理内存中的起始位置。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择地址转换模式&lt;&#x2F;strong&gt;：例如 Sv32（32位）、Sv39（39位虚拟地址）等。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;若 &lt;code&gt;satp.PPN = 0x1000&lt;&#x2F;code&gt;，表示顶级页表（L2）位于物理地址 &lt;code&gt;0x1000&lt;&#x2F;code&gt; 处。&lt;&#x2F;p&gt;
&lt;p&gt;CPU 根据 &lt;code&gt;satp&lt;&#x2F;code&gt; 寄存器找到顶级页表（L2）的物理地址。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;satp&lt;&#x2F;code&gt; 是页表系统的“大脑”&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;告诉 CPU 页表在哪里（&lt;code&gt;PPN&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;控制是否开启分页（&lt;code&gt;MODE&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;协助隔离进程（&lt;code&gt;ASID&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-7&quot;&gt;问题7：&lt;&#x2F;h4&gt;
&lt;p&gt;为什么要设置多级页表，如果这样做好的话，那么更多级别的不是越来越好吗？如果不好为什么要设计多级&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-7&quot;&gt;回答7：&lt;&#x2F;h4&gt;
&lt;p&gt;多级页表的设计是为了 &lt;strong&gt;节省内存&lt;&#x2F;strong&gt;，并 &lt;strong&gt;提高地址翻译的效率&lt;&#x2F;strong&gt;。但页表层级 &lt;strong&gt;不是越多越好&lt;&#x2F;strong&gt;，因为层级过多会 &lt;strong&gt;增加访问开销&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;1. 为什么要使用多级页表？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果使用 &lt;strong&gt;单级页表&lt;&#x2F;strong&gt;，每个进程需要维护完整的页表，会导致 &lt;strong&gt;巨大的内存占用&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;单级页表的问题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟地址&lt;&#x2F;strong&gt; 是 64-bit（常见架构）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;页大小&lt;&#x2F;strong&gt; 是 &lt;code&gt;4KB&lt;&#x2F;code&gt;（即 &lt;code&gt;2^12&lt;&#x2F;code&gt; = &lt;code&gt;4096&lt;&#x2F;code&gt; 字节）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;每个页表项（PTE）&lt;&#x2F;strong&gt; 占 &lt;code&gt;8B&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;计算单级页表大小：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需要管理 &lt;code&gt;2^64 &#x2F; 2^12 = 2^52&lt;&#x2F;code&gt; 个页&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;每个 PTE &lt;code&gt;8B&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单级页表大小&lt;&#x2F;strong&gt; = &lt;code&gt;2^52 × 8B = 36PB&lt;&#x2F;code&gt;（&lt;strong&gt;无法接受！&lt;&#x2F;strong&gt;）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;如果使用多级页表，只分配“必要的页表”，而不是整个大表，从而减少内存开销！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;2. 为什么不是越多级越好？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;多级页表减少内存占用，但增加了访问开销！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-zhi-fan-yi-de-cheng-ben&quot;&gt;&lt;strong&gt;地址翻译的成本&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;假设使用 &lt;strong&gt;3 级页表（Sv39）&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;[ L2 (9-bit) ] [ L1 (9-bit) ] [ PTE (9-bit) ] [ Offset (12-bit) ]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;访问过程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;code&gt;L2 页表&lt;&#x2F;code&gt;（取出 &lt;code&gt;L1 页表&lt;&#x2F;code&gt; 的 PPN）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;code&gt;L1 页表&lt;&#x2F;code&gt;（取出 &lt;code&gt;物理页&lt;&#x2F;code&gt; 的 PPN）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;code&gt;物理页&lt;&#x2F;code&gt; 计算最终物理地址&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;总共 3 次内存访问&lt;&#x2F;strong&gt; 才能完成一次翻译！&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;如果使用 5 级页表，会有更多次内存访问，导致性能下降！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;3-xian-you-jia-gou-shi-ru-he-xuan-ze-ji-shu-de&quot;&gt;&lt;strong&gt;3. 现有架构是如何选择级数的？&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sv32（2 级页表）&lt;&#x2F;strong&gt; → 适用于 &lt;strong&gt;32-bit 系统&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sv39（3 级页表）&lt;&#x2F;strong&gt; → 适用于 &lt;strong&gt;大多数 64-bit 服务器&#x2F;PC&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sv48（4 级页表）&lt;&#x2F;strong&gt; → 适用于 &lt;strong&gt;超大内存服务器&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sv57（5 级页表）&lt;&#x2F;strong&gt; → 适用于 &lt;strong&gt;未来超大内存&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;4-guan-jian-zong-jie&quot;&gt;&lt;strong&gt;4. 关键总结&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;✅ &lt;strong&gt;多级页表减少内存占用&lt;&#x2F;strong&gt;，因为它 &lt;strong&gt;按需分配页表&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
❌ &lt;strong&gt;页表级别过多会降低访问速度&lt;&#x2F;strong&gt;，因为每次地址转换都要查多个级别&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;最优解&lt;&#x2F;strong&gt; 取决于 &lt;strong&gt;物理内存大小&lt;&#x2F;strong&gt; 和 &lt;strong&gt;性能需求&lt;&#x2F;strong&gt;，不是越多级越好！&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wen-ti-8&quot;&gt;问题8：&lt;&#x2F;h4&gt;
&lt;p&gt;所以每一个进程都会有一个虚拟地址是吗？ 这样做的目的是什么呢？为了隔离应用程序吗？所以如果要通过寻找虚拟地址的物理地址，经过多次的内存读写是不是也是很大的问题？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-8&quot;&gt;回答8：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;连续虚拟空间&lt;&#x2F;strong&gt;：程序无需关心物理内存碎片。例如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;进程的堆、栈、代码段在虚拟地址中是连续的，但物理内存可能分散。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;每次访问虚拟地址需查页表（多级页表可能需4-5次内存访问）：&lt;&#x2F;p&gt;
&lt;p&gt;解决：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TLB（Translation Lookaside Buffer）&lt;&#x2F;strong&gt;：CPU缓存近期使用的 &lt;code&gt;虚拟页→物理页&lt;&#x2F;code&gt; 映射。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命中时：1个周期完成转换。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;未命中时：触发“页表遍历”（由MMU硬件加速）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TLB效果&lt;&#x2F;strong&gt;：典型程序的TLB命中率 &amp;gt;99%，几乎无额外开销。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;我的错误想法，把cpu等同于处理器了！&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;cpu并不等同于处理器&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPU&lt;&#x2F;strong&gt; = 大脑（负责思考）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理器芯片&lt;&#x2F;strong&gt; = 整个头（大脑+眼睛+耳朵+嘴巴）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;wen-ti-9&quot;&gt;问题9：&lt;&#x2F;h4&gt;
&lt;p&gt;那mmu是什么？ 和cpu的关系是什么&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-9&quot;&gt;回答9：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;MMU（Memory Management Unit，内存管理单元）是CPU的“地址翻译官”&lt;&#x2F;strong&gt;，负责把程序用的虚拟地址（如&lt;code&gt;0x8048000&lt;&#x2F;code&gt;）转换成物理内存的真实地址（如&lt;code&gt;0x12340000&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现代CPU&lt;&#x2F;strong&gt;：MMU直接集成在CPU内部（如Intel的MMU叫“&lt;strong&gt;Memory Management Unit&lt;&#x2F;strong&gt;”，ARM的叫“&lt;strong&gt;MMU&lt;&#x2F;strong&gt;”或“&lt;strong&gt;SMMU&lt;&#x2F;strong&gt;”）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-10&quot;&gt;问题10：&lt;&#x2F;h4&gt;
&lt;p&gt;cache和TLB之间的区别是什么？都是缓存 当计算机处理数据的时候什么时候用到TLB什么时候用到cache&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-10&quot;&gt;回答10：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Cache 和 TLB 的区别及使用场景&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;一句话总结&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache（缓存）&lt;&#x2F;strong&gt;：存储 &lt;strong&gt;数据&lt;&#x2F;strong&gt; 和 &lt;strong&gt;指令&lt;&#x2F;strong&gt;，加速CPU访问内存。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TLB（快表）&lt;&#x2F;strong&gt;：存储 &lt;strong&gt;虚拟地址→物理地址的映射关系&lt;&#x2F;strong&gt;，加速MMU查页表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-11&quot;&gt;问题11：&lt;&#x2F;h4&gt;
&lt;p&gt;page table是谁可以拥有的？ 一个进程吗 也就是一个应用程序吗？ 或者说一个应用程序分为内核态和用户态 这个表是谁在持有谁在控制呢&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-11&quot;&gt;回答11：&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;谁拥有页表？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;每个用户进程&lt;&#x2F;strong&gt; 有独立的页表（用户空间部分）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内核&lt;&#x2F;strong&gt; 有全局共享的页表（内核空间部分）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;谁控制页表？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内核&lt;&#x2F;strong&gt; 全权管理页表的创建、修改和销毁。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPU的MMU&lt;&#x2F;strong&gt; 负责运行时地址转换。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;wen-ti-12&quot;&gt;问题12：&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;为什么分页机制能让虚拟内存远大于物理内存？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da-12&quot;&gt;回答12：&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟内存 ≠ 物理内存&lt;&#x2F;strong&gt;，程序看到的是虚拟地址，由操作系统和硬件（MMU）动态映射到物理内存或磁盘。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;按需加载（Demand Paging）&lt;&#x2F;strong&gt;：程序运行时，只有当前需要的部分数据会加载到物理内存，其余部分暂存磁盘。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分页与交换&lt;&#x2F;strong&gt;：当物理内存不足时，操作系统将不活跃的内存页（Page）换出（Swap Out）到磁盘，腾出空间给新数据。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;wo-de-xiang-fa-1&quot;&gt;我的想法&lt;&#x2F;h4&gt;
&lt;p&gt;以xv6操作系统举例 分页机制就是分成了三个L2 L1 L0 然后分别对应了三个高级 中级 低级表，为什么只是用一个单表不行呢？ 如果只是用一个单表，并且设置为按需加载不是可以达到一样的效果吗？ 我的理解哪里出现了差错？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hui-da&quot;&gt;回答：&lt;&#x2F;h4&gt;
&lt;p&gt;主要错误：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;可能错误地认为单级页表可以按需加载页表项，但实际上单级页表的结构导致必须预先分配所有条目，而多级页表通过层次结构允许动态分配。&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;单页表&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存占用爆炸&lt;&#x2F;strong&gt;：&lt;br &#x2F;&gt;
若虚拟地址空间为 239239（如RISC-V Sv39标准），页大小为4KB（212212），则单级页表需要 239&#x2F;212=227239&#x2F;212=227 个页表项（PTE）。&lt;br &#x2F;&gt;
每个PTE占8字节（RISC-V标准），总内存占用为 227×8B=1GB227×8B=1GB。&lt;br &#x2F;&gt;
这意味着&lt;strong&gt;每个进程的页表自身就需要占用1GB物理内存&lt;&#x2F;strong&gt;，显然不可行。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;按需加载的局限性&lt;&#x2F;strong&gt;：&lt;br &#x2F;&gt;
单级页表的所有PTE必须预先分配（即使虚拟地址未使用），否则无法通过单级结构定位到缺失的PTE。&lt;br &#x2F;&gt;
&lt;strong&gt;按需加载只能管理页面（Page），无法管理页表本身&lt;&#x2F;strong&gt;。若页表条目未预先分配，硬件在地址转换时无法找到下一级PTE，导致无法触发缺页异常。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单级页表&lt;&#x2F;strong&gt;：固定占用4MB（无论实际用了多少内存）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二级页表&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;页目录&lt;&#x2F;strong&gt;：始终占用1个页（4KB，含1024个条目）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;页表&lt;&#x2F;strong&gt;：只需为已使用的虚拟页分配二级页表。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若3个物理页分散在3个不同的二级页表中，最多需要3个二级页表（每个4KB），总占用 4KB+3×4KB=16KB4KB+3×4KB=16KB。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;若3个物理页集中在1个二级页表内，则仅需 4KB+4KB=8KB4KB+4KB=8KB。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;page-fault&quot;&gt;page fault&lt;&#x2F;h4&gt;
&lt;p&gt;当程序首次访问某个虚拟地址时：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;硬件查页目录，发现对应的二级页表“不存在”（标记为无效）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;触发 &lt;strong&gt;缺页异常&lt;&#x2F;strong&gt;，操作系统动态分配一个二级页表，并将其地址填入页目录。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;继续执行地址转换。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;多级页表通过层级查询&lt;&#x2F;strong&gt;，允许中间层PTE标记为“无效”，从而跳过下级页表的分配。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多级页表&lt;&#x2F;strong&gt;：像图书馆的层级目录：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先按大类（页目录）查找 → 再按小类（页表）查找 → 最后找到具体的书（物理页）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果某大类无人借阅（未使用的地址空间），整个小类目录无需打印。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;关键代码：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;2fe3d767-68c6-4c98-ab8a-440f8defc461&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如何计算&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;dcbd1dde-7309-49b4-a3ea-41431177ee2d&quot; alt=&quot;Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;di-san-zhang-zhong-duan-he-qu-dong-cheng-xu&quot;&gt;第三章：终端和驱动程序&lt;&#x2F;h2&gt;
&lt;p&gt;运行进程时，cpu 一直处于一个大循环中 取指，更新 PC，执行，取指……&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yong-hu-cheng-xu-de-fei-fa-cao-zuo&quot;&gt;用户程序的非法操作&lt;&#x2F;h4&gt;
&lt;p&gt;（例如引用一个找不到页表项的虚拟地址）&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;三大挑战&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;内核必须使处理器能够从用户态转换到内核态（并且再转换回用户态）&lt;&#x2F;li&gt;
&lt;li&gt;内核和设备必须协调好他们并行的活动&lt;&#x2F;li&gt;
&lt;li&gt;内核必须知道硬件接口的细节&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;xi-tong-diao-yong-yi-chang-he-zhong-duan&quot;&gt;系统调用，异常和中断&lt;&#x2F;h4&gt;
&lt;p&gt;当硬盘读完一个数据块时，它会产生一个中断来提醒操作系统这个块已经准备好被获取了 &lt;em&gt;所有的中断都由内核管理，而不是进程&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;强迫进程服从处理器的调度&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;！系统必须保存寄存器以备将来的状态恢复&lt;br &#x2F;&gt;
！系统必须保持用户进程和系统进程的隔离&lt;&#x2F;p&gt;
&lt;p&gt;处理器需要在用户模式和内核模式之间切换&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;操作系统必须知道硬件是如何处理系统调用、异常和中断的&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一定要记住&lt;em&gt;陷入是由在 cpu 上运行的当前进程导致的&lt;&#x2F;em&gt;，而&lt;em&gt;中断&lt;&#x2F;em&gt;是由&lt;em&gt;设备&lt;&#x2F;em&gt;导致的，可能与当前进程毫无关系&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;陷入（Trap）场景：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当Word执行&lt;code&gt;printf()&lt;&#x2F;code&gt;系统调用请求打印服务时，会主动触发一个陷入（由CPU当前运行的Word进程导致）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;这就像你主动打电话给打印机客服（主动触发系统调用）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;陷入与当前进程（Word）直接相关，是它的代码逻辑的一部分&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;中断（Interrupt）场景：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;当打印机完成打印后：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打印机的硬件控制器会发送一个中断信号给CPU&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;此时CPU可能正在运行任何进程（比如你在中断到来时正好切换到Excel做表格）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;这个中断与Excel进程完全无关，是外部设备（打印机）触发的&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;就像打印机客服突然回拨电话，不管你现在正在做什么事情都要接听&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;x86de-bao-hu-ji-zhi&quot;&gt;x86的保护机制&lt;&#x2F;h4&gt;
&lt;p&gt;x86 有四个特权级，从 0（特权最高）编号到 3（特权最低）&lt;&#x2F;p&gt;
&lt;p&gt;在操作系统中 &lt;strong&gt;&lt;code&gt;int&lt;&#x2F;code&gt; 指令&lt;&#x2F;strong&gt;（如 &lt;code&gt;int 0x80&lt;&#x2F;code&gt; 或 &lt;code&gt;int 3&lt;&#x2F;code&gt;）和你平时编程中定义的 &lt;code&gt;int n&lt;&#x2F;code&gt;（整数变量）&lt;strong&gt;完全不同&lt;&#x2F;strong&gt;，它是 x86 架构下的一个&lt;strong&gt;机器指令&lt;&#x2F;strong&gt;，用于触发&lt;strong&gt;软中断&lt;&#x2F;strong&gt;（Software Interrupt），从而实现&lt;strong&gt;系统调用、调试断点、异常处理&lt;&#x2F;strong&gt;等关键功能。它的复杂性主要体现在以下几个方面：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;int n&lt;&#x2F;code&gt;（变量声明）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;例如 &lt;code&gt;int n = 10;&lt;&#x2F;code&gt;，这只是声明一个整数变量，属于高级语言（C&#x2F;C++）的语法，与 CPU 无关。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;int&lt;&#x2F;code&gt; 指令（x86 机器指令）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;例如 &lt;code&gt;int 0x80&lt;&#x2F;code&gt;，是 CPU 直接支持的指令，用于&lt;strong&gt;主动触发中断&lt;&#x2F;strong&gt;，让 CPU 从用户态切换到内核态，执行操作系统提供的服务（如读写文件、创建进程等）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;cha-ru-externyong-fa&quot;&gt;插入 extern用法&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;1433204&#x2F;how-do-i-use-extern-to-share-variables-between-source-files&quot;&gt;来自Stackoverflow回答&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;仅当您正在构建的程序由多个链接在一起的源文件组成时，使用 &lt;code&gt;extern&lt;&#x2F;code&gt; 才有意义，其中定义的某些变量（例如，在源文件 &lt;code&gt;file1.c&lt;&#x2F;code&gt; 中定义的变量）需要在其他源文件（如 &lt;code&gt;file2.c&lt;&#x2F;code&gt;）中引用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhong-duan-he-xian-jing&quot;&gt;中断和陷阱&lt;&#x2F;h2&gt;
&lt;p&gt;中断是打断 CPU 的“控制权”，不是打断程序逻辑本身。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dui-bi-zong-jie&quot;&gt;对比总结：&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;项目&lt;&#x2F;th&gt;&lt;th&gt;中断 Interrupt&lt;&#x2F;th&gt;&lt;th&gt;陷阱 Trap&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;来源&lt;&#x2F;td&gt;&lt;td&gt;外部设备&lt;&#x2F;td&gt;&lt;td&gt;当前程序&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;类型&lt;&#x2F;td&gt;&lt;td&gt;异步&lt;&#x2F;td&gt;&lt;td&gt;同步&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;用途&lt;&#x2F;td&gt;&lt;td&gt;响应外设事件&lt;&#x2F;td&gt;&lt;td&gt;系统调用、错误处理&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;控制权转移&lt;&#x2F;td&gt;&lt;td&gt;用户态 -&amp;gt; 内核态&lt;&#x2F;td&gt;&lt;td&gt;用户态 -&amp;gt; 内核态&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;pre&gt;&lt;code&gt;+-------------------+       +-------------------+       +-------------------+
|   用户程序执行      |       |   中断处理流程     |       |   操作系统内核     |
|                   |       |                   |       |                   |
| 执行int 0x80指令  | ----&amp;gt; | 1. 保存CPU上下文  | ----&amp;gt; | 查找系统调用表    |
| (系统调用)         |       | 2. 切换内核模式    |       | 执行对应服务例程  |
|                   |       | 3. 识别中断号      |       |                   |
| 发生除零错误       | ----&amp;gt; | 1. 保存CPU上下文  | ----&amp;gt; | 执行异常处理程序  |
| (异常)            |       | 2. 切换内核模式    |       | 可能终止进程      |
|                   |       | 3. 识别异常类型    |       |                   |
+-------------------+       +-------------------+       +-------------------+
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;中断可能打断一个正在持有锁的上下文，然后又尝试去拿这个锁，造成自己等自己释放锁 → 死锁。&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zi-xuan-suo-spinlock-de-zuo-yong&quot;&gt;&lt;strong&gt;自旋锁（Spinlock）的作用&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;自旋锁是一种 &lt;strong&gt;低级的同步机制&lt;&#x2F;strong&gt;，用于在多核 CPU 或并发线程中保护共享资源（如全局变量、数据结构）。它的核心行为是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取锁（&lt;code&gt;acquire&lt;&#x2F;code&gt;）&lt;&#x2F;strong&gt;：如果锁已被其他 CPU&#x2F;线程占用，当前 CPU&#x2F;线程会 &lt;strong&gt;忙等待（自旋）&lt;&#x2F;strong&gt;，直到锁被释放。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;释放锁（&lt;code&gt;release&lt;&#x2F;code&gt;）&lt;&#x2F;strong&gt;：当前持有者解锁，允许其他竞争者获取。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;struct spinlock lock;
int shared_data = 0;

void thread_A() {
    acquire(&amp;amp;lock);      &amp;#x2F;&amp;#x2F; 获取锁
    shared_data += 1;    &amp;#x2F;&amp;#x2F; 安全修改共享数据
    release(&amp;amp;lock);      &amp;#x2F;&amp;#x2F; 释放锁
}

void thread_B() {
    acquire(&amp;amp;lock);      &amp;#x2F;&amp;#x2F; 如果锁被 thread_A 持有，则自旋等待
    shared_data -= 1;
    release(&amp;amp;lock);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;wei-shen-me-xu-yao-zhi-dao-dang-qian-chi-you-suo-de-cpu&quot;&gt;&lt;strong&gt;为什么需要知道“当前持有锁的 CPU”？&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;自旋锁的实现中，通常会记录 &lt;strong&gt;当前持有锁的 CPU 核心编号&lt;&#x2F;strong&gt;（通过 &lt;code&gt;cpuid()&lt;&#x2F;code&gt; 获取），目的是：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;死锁检测&lt;&#x2F;strong&gt;：防止同一 CPU 重复获取锁（导致永久等待）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调试信息&lt;&#x2F;strong&gt;：在发生死锁时，打印持有锁的 CPU 编号，帮助定位问题。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;zi-xuan-suo-de-you-que-dian&quot;&gt;&lt;strong&gt;自旋锁的优缺点&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;无上下文切换，响应快&lt;&#x2F;td&gt;&lt;td&gt;忙等待浪费 CPU 周期&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;适合极短临界区（如修改一个变量）&lt;&#x2F;td&gt;&lt;td&gt;不适合长时间持有锁&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;实现简单&lt;&#x2F;td&gt;&lt;td&gt;可能引发活锁（高竞争场景）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;yuan-zi-cao-zuo&quot;&gt;原子操作&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;lab-page-table&quot;&gt;Lab Page table&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;speed-up-system-calls&quot;&gt;Speed up system calls&lt;&#x2F;h4&gt;
&lt;p&gt;通过在用户空间和内核之间的&lt;em&gt;只读区域中共享数据来加速某些系统调用&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;技术实现关键点&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存映射&lt;&#x2F;strong&gt;：通过页表机制，将内核中的一块物理页面同时映射到内核和用户地址空间，并标记为用户只读（避免用户篡改）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;同步问题&lt;&#x2F;strong&gt;：由于数据是只读的，内核在更新数据时（如进程切换后更新PID），需保证用户态看到的是最新值（可通过原子写或页表权限动态调整实现）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全性&lt;&#x2F;strong&gt;：必须确保用户程序不能修改共享数据（通过硬件页表权限保护）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;jigsaw-zong-mu-biao&quot;&gt;🧩 总目标&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;实现在用户态，不用执行系统调用，就能获取当前进程的 &lt;code&gt;pid&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;li-jie-kvmmap&quot;&gt;理解kvmmap&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;void

kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)

{

  if(mappages(kpgtbl, va, sz, pa, perm) != 0)

    panic(&amp;quot;kvmmap&amp;quot;);

}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;int

mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)

{

  uint64 a, last;

  pte_t *pte;

  

  if(size == 0)

    panic(&amp;quot;mappages: size&amp;quot;);

  a = PGROUNDDOWN(va);

  last = PGROUNDDOWN(va + size - 1);

  for(;;){

    if((pte = walk(pagetable, a, 1)) == 0)

      return -1;

    if(*pte &amp;amp; PTE_V)

      panic(&amp;quot;mappages: remap&amp;quot;);

    *pte = PA2PTE(pa) | perm | PTE_V;

    if(a == last)

      break;

    a += PGSIZE;

    pa += PGSIZE;

  }

  return 0;

}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;2-risc-v-sv39-di-zhi-hua-fen&quot;&gt;&lt;strong&gt;2. RISC-V Sv39 地址划分&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;虚拟地址 &lt;code&gt;va&lt;&#x2F;code&gt; 被划分为 5 部分（从高到低）：&lt;&#x2F;p&gt;
&lt;p&gt;| 63..39 | 38..30 (L2) | 29..21 (L1) | 20..12 (L0) | 11..0 (offset) |&lt;&#x2F;p&gt;
&lt;p&gt;必须为0    二级页表索引   一级页表索引   零级页表索引     页内偏移&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每级页表索引占 9 位（&lt;code&gt;2^9=512&lt;&#x2F;code&gt; 个 PTE）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;页表项（PTE）存储下一级页表的 &lt;strong&gt;物理地址（PA）&lt;&#x2F;strong&gt; 或最终页的物理地址。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;pte_t *walk(pagetable_t pagetable, uint64 va, int alloc)
参数	含义
pagetable	根页表（即 satp 指向的页表）
va	虚拟地址
alloc	如果中间页表不存在，是否允许自动 kalloc
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RISC-V 使用三级页表：&lt;strong&gt;level 2 → level 1 → level 0&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;每级页表有 512 项，对应 VA 中的不同段（用 &lt;code&gt;PX(level, va)&lt;&#x2F;code&gt; 取出）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;PGROUNDDOWN(a) = a &amp;amp; ~(PGSIZE - 1)
PGSIZE - 1 就是 0xFFF（即 4095，低 12 位全是 1）

~(PGSIZE - 1) 就是 0xFFFFF000，高位全是 1，低 12 位全是 0

a &amp;amp; ~(PGSIZE - 1) 会把 a 的低 12 位清零


&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ye-biao-xiang-pte-ru-he-cun-chu-wu-li-di-zhi&quot;&gt;页表项（PTE）如何存储物理地址&lt;&#x2F;h3&gt;
&lt;p&gt;一个 PTE 是一个 64 位的数。其结构如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;| 63        ...        10 | 9 ... 0 | |     PPN (物理页号)      | 标志位 |&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pte-dao-wu-li-di-zhi-de-guo-cheng-shi-zhe-yang-de&quot;&gt;PTE 到物理地址的过程是这样的&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;uint64 ppn = *pte &amp;gt;&amp;gt; 10;        &amp;#x2F;&amp;#x2F; 去掉低 10 位的标志
uint64 pa = ppn &amp;lt;&amp;lt; 12;          &amp;#x2F;&amp;#x2F; 得到物理页起始地址
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;页号 * 页大小&lt;&#x2F;p&gt;
&lt;p&gt;示例：&lt;&#x2F;p&gt;
&lt;p&gt;第一个页 页号为1 页大小固定为4K &lt;code&gt;0x1000 ~ 0x1FFF&lt;&#x2F;code&gt;（4096 字节大小）&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;pa = ppn × 4096 = ppn × 2¹² = ppn &amp;lt;&amp;lt; 12&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;12288 = 0x3000 怎么快速计算出&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;4096 = 0x1000&lt;&#x2F;code&gt;（因为 &lt;code&gt;16^3 = 4096&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分解 12288&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;12288 ÷ 4096 = 3&lt;&#x2F;code&gt; → 表示有 &lt;strong&gt;3 个 0x1000&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;因此：&lt;code&gt;3 × 0x1000 = 0x3000&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;下次遇到类似计算，直接问自己：&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
“这个数包含几个 4096？” → 答案就是 &lt;code&gt;0xN000&lt;&#x2F;code&gt; 中的 &lt;code&gt;N&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;li-jie-initcode-s&quot;&gt;理解 initcode.S&lt;&#x2F;h2&gt;
&lt;p&gt;目前还看不懂啊&lt;&#x2F;p&gt;
&lt;h3 id=&quot;czhong-zhi-zhen-yu-shu-zu-de-guan-xi&quot;&gt;c中指针与数组的关系&lt;&#x2F;h3&gt;
&lt;pre&gt;&lt;code&gt;帮我理解一下 数组和指针的关系以及操作我对这里还是有点模糊就是 pte_t pte = pagetable[i]; typedef uint64 *pagetable_t; &amp;#x2F;&amp;#x2F; 512 PTEs
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;typedef uint64* pagetable_t;  &#x2F;&#x2F; 页表是 uint64 的指针，指向 512 个 PTE（页表项） &lt;&#x2F;code&gt;
&lt;code&gt;pagetable_t pagetable;  &#x2F;&#x2F; 等价于：uint64* pagetable; &lt;&#x2F;code&gt;
&lt;code&gt;pagetable[i] 等价于 *(pagetable + i)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pagetable&lt;&#x2F;code&gt; 是一个指针，指向第一个 PTE；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pagetable + i&lt;&#x2F;code&gt; 就是跳过 i 个 PTE 的位置；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;*&lt;&#x2F;code&gt; 就是取出这个位置的值；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;所以 &lt;code&gt;pagetable[i]&lt;&#x2F;code&gt; 就是第 i 个页表项（类型是 uint64，也就是 pte_t）；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;内存布局图！  GDB&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
