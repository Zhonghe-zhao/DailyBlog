<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title> - TOP</title>
      <link>https://Zhonghe-zhao.github.io/DailyBlog/</link>
      <description></description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://Zhonghe-zhao.github.io/DailyBlog/tags/top/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Tue, 10 Jun 2025 11:26:59 +0000</lastBuildDate>
      <item>
          <title>与北邮老哥的交谈</title>
          <pubDate>Tue, 10 Jun 2025 11:26:59 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-18/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-18/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-18/">&lt;h1 id=&quot;mo-ni-mian-shi&quot;&gt;模拟面试&lt;&#x2F;h1&gt;
&lt;p&gt;2025-06-10日 老哥给我来了一个模拟面试，看到了自己的不足和欠缺&lt;&#x2F;p&gt;
&lt;p&gt;没有面试过真的不知道，面试官主要问的是什么，怎么问！&lt;&#x2F;p&gt;
&lt;p&gt;其实 &lt;strong&gt;简历是自己与面试官沟通的一个桥梁&lt;&#x2F;strong&gt; 根据简历，让面试官快速了解你，通过简历，能够知道问你什么知识！&lt;&#x2F;p&gt;
&lt;p&gt;对于项目的整体架构，流程，模块，功能是怎么了解的！技术选型是为什么？ 你所回答的每一个问题，都会成为面试官下一步的追问点，对于每一步
你应该有所准备有所了解！代码的编写能力，不能落下！&lt;&#x2F;p&gt;
&lt;p&gt;修改简历，为你真正能够回答的你所涉及的知识，而不是为了好看而去写上，但问你你却答不出来，反而成了减分项！&lt;&#x2F;p&gt;
&lt;p&gt;基础不行（数据结构和算法 操作系统 计算机网络） 对于下一步如何正确的学习，老哥给了我一些方法和建议，我认为非常有帮助！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;pre&gt;&lt;code&gt;
我说一个学习的方式：提问-&amp;gt;解答-&amp;gt;再提问的方式：
首先提出一个问题，比如TCP是什么？

TCP是传输层的一种可靠传输协议

得到这个答案后，我自然想问：

传输层是什么？可靠传输协议又是什么?

传输层是OSI网络模型中，负责提供抽象通道的一层协议集
可靠传输协议能够保证该抽象通道的数据能够从通道A端完整可靠地到达B端

得到上面的解答后，我又能够提问：
OSI网络模型是什么？可靠传输协议有哪些？可靠传输怎么实现的？

OSI是一种将承担不同责任的基础设施分层，并按照不同层将各自的通信协议分类的模型
可靠传输协议最常见的是TCP，其他的我暂时不关心
可靠传输主要通过重传实现，也就是说如果数据没有发到，再发一次

怎么知道数据有没有发到？

如果B端接收到了A端的数据，会发送一个ack，表示收到

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如何&lt;strong&gt;判断&lt;&#x2F;strong&gt;对某个知识你是否真的&lt;strong&gt;理解了&lt;&#x2F;strong&gt;？&lt;&#x2F;p&gt;
&lt;p&gt;这真的很重要！&lt;&#x2F;p&gt;
&lt;p&gt;我自己的感受就是很多知识学习了，会忘，那种感觉很难受，反反复复的看，总是记不住，时间花出去了但是没有收获到什么！ 在被问道的时候什么也回答不上来！&lt;&#x2F;p&gt;
&lt;p&gt;也就是 &lt;strong&gt;有些东西你看懂了表面的行为，但是实际上并不理解本质&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cong-biao-ceng-kai-shi-si-kao&quot;&gt;从表层开始思考&lt;&#x2F;h2&gt;
&lt;p&gt;比如鉴权系统需要知道用户信息，否则就无法执行后续逻辑，那就是流程上存在数据依赖，如果是两台服务器提供并发服务，那么就是全局上要求两者的数据一致，但是&lt;strong&gt;只看通信&lt;&#x2F;strong&gt;就很好理解：数据从A到B，所以理解了一个简单易懂的机制后，学会追问为什么要这么做&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;说到底，没有记住的东西，一般是缺乏思考了&lt;&#x2F;strong&gt; &lt;em&gt;多问问自己，为了达到目的，我应该做什么？&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hua-ti-zhan-kai&quot;&gt;话题展开&lt;&#x2F;h2&gt;
&lt;p&gt;老哥说了关于粒度 和 维度 这词语在IT届 公司中很常用的词语，但是我确实不太理解是什么意思&lt;&#x2F;p&gt;
&lt;p&gt;什么是 &quot;切分数据“? 这是我从没有涉猎过的一个词语&lt;&#x2F;p&gt;
&lt;p&gt;_事物本质往往更抽象&lt;&#x2F;p&gt;
&lt;p&gt;具体的东西很好理解和学习，适合入门_&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;例如搜索：MVCC&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;你并不理解MVCC是什么！ 但是在网上搜索会有很多相关的文章， 实现大多是基于InnoDB，虽然你不知道是什么，但是&lt;strong&gt;文章中总是会将某个概念绑定到某个具体的实现&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但实际上MVCC是一个抽象的概念它的作用是 ：要求多版本共存，事务隔离（引发思考：MVCC是什么？ 要达到什么要求？）为了实现这个要求，谁谁谁具体做了什么？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;对于TCP：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;传输是个抽象的概念，可靠的传输是个抽象的概念，落到TCP上就有了具体实现, 但是可靠传输不依赖TCP,所以写代码一般会先写接口&lt;&#x2F;p&gt;
&lt;p&gt;先约定接口，然后实现，这是一种思考方式!（&lt;strong&gt;实现能力，代码能力&lt;&#x2F;strong&gt;）&lt;&#x2F;p&gt;
&lt;p&gt;然后反过来，我们看到一个设计，反过来想为什么要这么设计，目的是什么(&lt;strong&gt;抽象能力&lt;&#x2F;strong&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;如果不懂某个概念应该去弄明白它的概念 ， 然后从AI给你的一堆：SQL中的切分、数学中的切分、数据工程中的切分等等中，找到具体事物的共性&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;看了一段话，想一下为什么是这样，如果不是这样呢？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;ref&#x2F;meml&quot;&gt;go从抽象的层面探讨并发编程的本质&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;慢慢啃，然后理解为什么会有锁、条件变量、channel各种并发原语，能不能用一种唯一的机制实现他们，为什么不用唯一的机制实现它们，等等&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;结合一点能激活大脑兴奋的事情&lt;&#x2F;strong&gt; ，看书陷入困惑是容易放弃思考&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;需要的时候选合适的章节过一遍 把疑惑点选出来 再通过各种能激发思考途径解决&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;改正自己从头读到尾的看一本书 ，知识学不完的&lt;&#x2F;p&gt;
&lt;p&gt;让自己的思维喜欢上思考！慢慢来&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>博文推荐</title>
          <pubDate>Wed, 28 May 2025 13:07:22 +0000</pubDate>
          <author>Zhonghe-zhao</author>
          <link>https://Zhonghe-zhao.github.io/DailyBlog/issue-9/</link>
          <guid>https://Zhonghe-zhao.github.io/DailyBlog/issue-9/</guid>
          <description xml:base="https://Zhonghe-zhao.github.io/DailyBlog/issue-9/">&lt;h1 id=&quot;you-zhi-bo-wen-jing-xuan-ji&quot;&gt;优质博文精选集&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;一个持续更新的高质量技术&#x2F;设计&#x2F;思维类博文索引库&lt;br &#x2F;&gt;
「我们站在巨人的肩膀上，但需要知道肩膀在哪」&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2025-06-12ri-tui-jian&quot;&gt;2025-06-12日推荐&lt;&#x2F;h2&gt;
&lt;p&gt;获取前沿资料&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dl.acm.org&#x2F;&quot;&gt;ACM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nature.com&#x2F;&quot;&gt;Nature&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.sigplan.org&#x2F;&quot;&gt;SIGPLAN编程语言博客&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;scholar.google.de&#x2F;&quot;&gt;Google学术搜索&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;list&#x2F;cs.PL&#x2F;recent&quot;&gt;arXiv编程语言文论&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.golang.org&#x2F;&quot;&gt;Go官方文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;go&quot;&gt;Go语言Github&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go-review.googlesource.com&quot;&gt;Go代码审查&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;x.com&#x2F;&quot;&gt;Twitter&#x2F;X平台&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;reddit&#x2F;r&#x2F;golang&quot;&gt;Reddit Go社区&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;g&#x2F;golang-nuts&quot;&gt;Go技术讨论组&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;g&#x2F;golang-dev&quot;&gt;Go开发组&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;g&#x2F;golang-tools&quot;&gt;Go工具组&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2025-06-06ri-tui-jian&quot;&gt;2025-06-06日推荐&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;terriblesoftware.org&#x2F;2025&#x2F;04&#x2F;23&#x2F;the-hidden-cost-of-ai-coding&#x2F;&quot;&gt;关于AI编码思考&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;我们生命中最美好的时刻不是被动、接受、放松的时光......最好的时刻通常发生在一个人的身体或思想自愿努力完成困难和有价值的事情时。— 米哈利·西克森特米哈伊&quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2025-05-11ri-tui-jian&quot;&gt;2025-05-11日推荐&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cn.nytimes.com&#x2F;obits&#x2F;20210524&#x2F;yuan-longping-dead&#x2F;&quot;&gt;讣告-袁隆平&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;“这不是什么秘密，我的经历可以用四个词来概括：知识、汗水、灵感和机会，”袁隆平去年在一段鼓励中国年轻人投身科学的视频中说。他还在英语引用了科学家路易斯·巴斯德(Louis Pasteur)的话：“机会青睐有准备的头脑。”&lt;&#x2F;p&gt;
&lt;p&gt;---袁隆平&lt;&#x2F;p&gt;
&lt;p&gt;[低期望，多尝试]&lt;&#x2F;p&gt;
&lt;p&gt;“我们应该做一个积极行动的悲观主义者，对未来低期望，但只要是值得的，就坚定去做。当一个有前途的新项目出现在你面前时，不妨认定它很难成功，但是如果你相信这个项目，即便赚不到钱你也想做，那么无论如此，你要去试一下。”&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2025-04-16tui-jian&quot;&gt;2025-04-16推荐&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.dutchosintguy.com&#x2F;post&#x2F;the-slow-collapse-of-critical-thinking-in-osint-due-to-ai&quot;&gt;AI导致批判性思维逐渐崩溃&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
</description>
      </item>
    </channel>
</rss>
